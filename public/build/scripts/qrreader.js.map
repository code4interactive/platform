{"version":3,"sources":["plugins/QrReader/DecoderWorker.js","plugins/QrReader/qrcodelib.js","plugins/QrReader/webcodecamjquery.js","plugins/QrReader/main.js"],"names":["CropTable","x","y","w","h","Image","width","table","slice","height","i","length","CreateImageData","Log","message","postMessage","result","success","flipTable","reverse","rotateTableRight","tempTable","tempArray","j","push","rotateTableLeft","RemoveDist","DeclineValue","Distance","Count","DistanceHolder","Math","floor","verticalAreas","dataCopy","Uint8ClampedArray","data","LowLight","contrastBinary","contrast","binary","start","counter","mainStart","round","cordArray","tempCord","wasWhite","tempStart","InterestAreas","step","LoopExit","percentage","cordsY","previous","HorizontalArea","allAreas","Converter","BlackEdges","threshold","avrg","whiteArray","CreateTable","EnlargeTable","TempArray","ScaleHeight","scale","avrgRed","avrgGreen","avrgBlue","k","ImgProcessing","BlackEdge","TrimBlack","coordHolder","averageLines","allTables","tempLength","resultVertical","tempSecondTable","amount","max","min","parseFloat","value","tan","PI","len","ave","img","x_coordinates","count","begin","area","BlackArea","ending","average","allAverage","Ycoords","comparison","abs","Main","tableSelection","successfulDecodings","z","Selection","variationData","scaled","incrmt","format","eanStatistics","eanOrder","yStraighten","subarray","FormatPriority","BinaryString","string","tempObj","correction","Ean13Speed","finished","points","key","pointTemp","indexOf","minPoints","Number","POSITIVE_INFINITY","tempString","DecodeNr","newImg","TwoOfFiveStartEnd","values","u","prevpos","wideAvrg","narrowAvrg","CheckInterleaved","pos","val","type","bars","totalBars","binaryString","binTemp","skipWhite","trigger","container","firstEan","EanCounter","corrections","SlicedArray","BarLength","binTempInter","switchTotal","TwoOfFiveBin","interBin","checkData","q","tempCounter","Distribution","CheckCode128","DecodeCode128","CheckCode93","DecodeCode93","CheckCode39","DecodeCode39","DecodeEAN13","Decode2Of5","totalBinArray","total","maxLength","testData","BinArray","sum","tempBin","narrowArr","wideArr","indexCount","prevIndex","minAvrg","maxAvrg","checking","hitIndex","isFinite","prevPos","Secure2Of5","checksum","join","Code128Encoding","failSafe","summarizer","TwoOfFiveEncoding","leftSide","rightSide","decodeFormat","EAN13Encoding","resultArray","formats","weight","checkOne","checkTwo","Code93Encoding","checkSum","firstCheck","firstBool","secondCheck","secondBool","Code39Encoding","character","resultString","special","specialchar","ExtendedEncoding","ExtendedExceptions","symbol","set","Code128Format","ECB","dataCodewords","this","__defineGetter__","ECBlocks","ecCodewordsPerBlock","ecBlocks1","ecBlocks2","ecBlocks","Array","NumBlocks","getECBlocks","Version","versionNumber","alignmentPatternCenters","ecBlocks3","ecBlocks4","ecCodewords","ECCodewordsPerBlock","ecbArray","ecBlock","DataCodewords","totalCodewords","buildFunctionPattern","dimension","DimensionForVersion","bitMatrix","BitMatrix","setRegion","getECBlocksForLevel","ecLevel","ordinal","buildVersions","PerspectiveTransform","a11","a21","a31","a12","a22","a32","a13","a23","a33","transformPoints1","denominator","transformPoints2","xValues","yValues","n","buildAdjoint","times","other","DetectorResult","bits","Detector","image","resultPointCallback","sizeOfBlackWhiteBlackRun","fromX","fromY","toX","toY","steep","temp","dx","dy","error","ystep","xstep","state","realX","realY","qrcode","diffX","diffY","sqrt","diffX2","diffY2","sizeOfBlackWhiteBlackRunBothWays","otherToX","otherToY","calculateModuleSizeOneWay","pattern","otherPattern","moduleSizeEst1","X","Y","moduleSizeEst2","isNaN","calculateModuleSize","topLeft","topRight","bottomLeft","distance","pattern1","pattern2","xDiff","yDiff","computeDimension","moduleSize","tltrCentersDimension","tlblCentersDimension","findAlignmentInRegion","overallEstModuleSize","estAlignmentX","estAlignmentY","allowanceFactor","allowance","alignmentAreaLeftX","alignmentAreaRightX","alignmentAreaTopY","alignmentAreaBottomY","alignmentFinder","AlignmentPatternFinder","find","createTransform","alignmentPattern","bottomRightX","bottomRightY","sourceBottomRightX","sourceBottomRightY","dimMinusThree","transform","quadrilateralToQuadrilateral","sampleGrid","sampler","GridSampler","sampleGrid3","processFinderPatternInfo","info","TopLeft","TopRight","BottomLeft","provisionalVersion","getProvisionalVersionForDimension","modulesBetweenFPCenters","AlignmentPatternCenters","correctionToTopLeft","detect","FinderPatternFinder","findFinderPattern","FormatInformation","formatInfo","errorCorrectionLevel","ErrorCorrectionLevel","forBits","dataMask","GetHashCode","Equals","o","name","ordinal_Renamed_Field","rowSize","get_Renamed","offset","URShift","set_Renamed","flip","clear","left","top","right","bottom","DataBlock","numDataCodewords","codewords","BitMatrixParser","Dimension","parsedVersion","parsedFormatInfo","copyBit","versionBits","readFormatInformation","formatInfoBits","decodeFormatInformation","iMin","readVersion","getVersionForNumber","ijMin","decodeVersionInformation","readCodewords","version","DataMask","forReference","unmaskBitMatrix","functionPattern","readingUp","TotalCodewords","resultOffset","currentByte","bitsRead","col","DataMask000","isMasked","DataMask001","DataMask010","DataMask011","DataMask100","DataMask101","DataMask110","DataMask111","ReedSolomonDecoder","field","decode","received","twoS","poly","GF256Poly","syndromeCoefficients","dataMatrix","noError","eval","evaluateAt","exp","syndrome","sigmaOmega","runEuclideanAlgorithm","buildMonomial","sigma","omega","errorLocations","findErrorLocations","errorMagnitudes","findErrorMagnitudes","position","log","GF256","addOrSubtract","a","b","R","Degree","rLast","r","sLast","One","s","Zero","tLast","t","rLastLast","sLastLast","tLastLast","denominatorLeadingTerm","getCoefficient","dltInverse","inverse","degreeDiff","multiply","multiplyByMonomial","multiply1","sigmaTildeAtZero","multiply2","errorLocator","numErrors","e","errorEvaluator","xiInverse","coefficients","coefficientsLength","firstNonZero","ci","degree","size","result2","smallerCoefficients","largerCoefficients","sumDiff","lengthDiff","aCoefficients","aLength","bCoefficients","bLength","product","aCoeff","scalar","coefficient","divide","quotient","remainder","inverseDenominatorLeadingTerm","degreeDifference","term","iterationQuotient","primitive","expTable","logTable","at0","zero","at1","one","number","FinderPattern","posX","posY","estimatedModuleSize","incrementCount","aboutEquals","moduleSizeDiff","FinderPatternInfo","patternCenters","possibleCenters","hasSkipped","crossCheckStateCount","foundPatternCross","stateCount","totalModuleSize","INTEGER_MATH_SHIFT","maxVariance","centerFromEnd","end","crossCheckVertical","startI","centerJ","maxCount","originalStateCountTotal","maxI","CrossCheckStateCount","NaN","stateCountTotal","crossCheckHorizontal","startJ","centerI","maxJ","handlePossibleCenter","found","index","center","point","foundPossibleResultPoint","selectBestPatterns","startSize","square","centerValue","EstimatedModuleSize","sort","center1","center2","dA","dB","stdDev","limit","remove","findRowSkip","firstConfirmedCenter","CENTER_QUORUM","haveMultiplyConfirmedCenters","confirmedCount","totalDeviation","tryHarder","iSkip","MAX_MODULES","MIN_SKIP","done","currentState","confirmed","rowSkip","patternInfo","orderBestPatterns","AlignmentPattern","startX","startY","middleI","iGen","QRCodeDataBlockReader","blocks","numErrorCorrectionCode","blockPointer","bitPointer","dataLength","dataLengthMode","getNextBits","numBits","mask","mask1","mask3","bitsFirstBlock","bitsSecondBlock","bitsThirdBlock","NextMode","getDataLength","modeIndicator","sizeOfDataLengthInfo","getRomanAndFigureString","intData","strData","tableRomanAndFigure","firstLetter","secondLetter","getFigureString","get8bitByteArray","output","getKanjiString","unicodeString","lowerByte","higherByte","tempWord","shiftjisWord","String","fromCharCode","MODE_NUMBER","MODE_ROMAN_AND_NUMBER","MODE_8BIT_BYTE","MODE_KANJI","mode","temp_str","ta","charCodeAt","temp_sbyteArray3","212222","A","B","C","222122","222221","121223","121322","131222","122213","122312","132212","221213","221312","231212","112232","122132","122231","113222","123122","123221","223211","221132","221231","213212","223112","312131","311222","321122","321221","312212","322112","322211","212123","212321","232121","111323","131123","131321","112313","132113","132311","211313","231113","231311","112133","112331","132131","113123","113321","133121","313121","211331","231131","213113","213311","213131","311123","311321","331121","312113","312311","332111","314111","221411","431111","111224","111422","121124","121421","141122","141221","112214","112412","122114","122411","142112","142211","241211","221114","413111","241112","134111","111242","121142","121241","114212","124112","124211","411212","421112","421211","212141","214121","412121","111143","111341","131141","114113","114311","411113","411311","113141","114131","311141","411131","211412","211214","211232","233111","131112","111213","111312","111411","121113","121212","121311","111114","131211","141111","211113","211212","211311","221112","221211","231111","112113","112212","112311","122112","132111","111123","111222","111321","121122","131121","212112","212211","211122","211221","221121","222111","112122","112221","122121","123111","121131","311112","311211","321111","112131","113121","211131","121221","312111","311121","122211","111141","111221211","211211112","112211112","212211111","111221112","211221111","112221111","111211212","211211211","112211211","211112112","112112112","212112111","111122112","211122111","112122111","111112212","211112211","112112211","111122211","211111122","112111122","212111121","111121122","211121121","112121121","111111222","211111221","112111221","111121221","221111112","122111112","222111111","121121112","221121111","122121111","121111212","221111211","122111211","121212111","121211121","121112121","111212121","121121211","/A","/B","/C","/D","/E","/F","/G","/H","/I","/J","/K","/L","/O","/Z","%F","%G","%H","%I","%J","%K","%L","%M","%N","%O","+A","+B","+C","+D","+E","+F","+G","+H","+I","+J","+K","+L","+M","+N","+O","+P","+Q","+R","+S","+T","+U","+V","+W","+X","+Y","+Z","%P","%Q","%R","%S","L","0001101","0011001","0010011","0111101","0100011","0110001","0101111","0111011","0110111","0001011","G","0100111","0110011","0011011","0100001","0011101","0111001","0000101","0010001","0001001","0010111","1110010","1100110","1101100","1000010","1011100","1001110","1010000","1000100","1001000","1110100","LLLLLL","LLGLGG","LLGGLG","LLGGGL","LGLLGG","LGGLLG","LGGGLL","LGLGLG","LGLGGL","LGGLGL","self","onmessage","ImageData","Width","Height","Decode","cmd","checkAndNudgePoints","nudged","iValue","xpoint","bit","imagedata","aioobe","sampleGridx","p1ToX","p1ToY","p2ToX","p2ToY","p3ToX","p3ToY","p4ToX","p4ToY","p1FromX","p1FromY","p2FromX","p2FromY","p3FromX","p3FromY","p4FromX","p4FromY","VERSION_DECODE_INFO","VERSIONS","iae","bestDifference","bestVersion","targetVersion","bitsDifference","numBitsDiffering","x0","y0","x1","y1","x2","y2","x3","y3","x0p","y0p","x1p","y1p","x2p","y2p","x3p","y3p","qToS","quadrilateralToSquare","sToQ","squareToQuadrilateral","dy2","dy3","dx1","dx2","dx3","dy1","FORMAT_INFO_MASK_QR","FORMAT_INFO_DECODE_LOOKUP","BITS_SET_IN_HALF_BYTE","maskedFormatInfo","doDecodeFormatInformation","bestFormatInfo","decodeInfo","targetInfo","FOR_BITS","M","Q","H","getDataBlocks","rawCodewords","totalBlocks","ecBlockArray","numResultBlocks","numBlockCodewords","shorterBlocksTotalCodewords","longerBlocksStartAt","numCodewords","shorterBlocksNumDataCodewords","rawCodewordsOffset","iOffset","reference","DATA_MASKS","QR_CODE_FIELD","DATA_MATRIX_FIELD","Decoder","rsDecoder","correctErrors","codewordBytes","codewordsInts","numECCodewords","rse","parser","dataBlocks","totalBytes","NumDataCodewords","resultBytes","dataBlock","Codewords","reader","VersionNumber","Bits","qrCodeSymbol","debug","maxImgSize","sourceCanvas","callback","src","arguments","canvas_qr","document","getElementById","context","getContext","getImageData","process","onload","createElement","nheight","nwidth","ir","drawImage","isUrl","regexp","test","decode_url","escaped","escape","ret","decodeURIComponent","decode_utf8","ctx","Date","getTime","grayScaleToBitmap","grayscale","putImageData","detector","qRCodeMatrix","DataByte","str","getPixel","p","binarize","th","gray","getMiddleBrightnessPerArea","numSqrtArea","areaWidth","areaHeight","minmax","i2","ay","ax","target","middle","i3","grayScale","sqrtNumArea","bitmap","prototype","from","to","rest","apply","patterns","crossProductZ","pointA","pointB","pointC","bX","bY","zeroOneDistance","oneTwoDistance","zeroTwoDistance","$","window","undefined","Plugin","element","options","Self","display","extend","defaults","_defaults","_name","pluginName","init","con","constraints","changeConstraints","mediaDevices","getUserMedia","then","cameraSuccess","cameraError","getUserMediaError","play","localStream","delayBool","video","setTimeout","decodeBarCodeRate","tryParseBarCode","decodeQRCodeRate","tryParseQRCode","stop","clearRect","pause","streamSrc","active","enabled","stream","setEventListeners","on","isStreaming","videoWidth","videoHeight","attr","flipHorizontal","translate","flipVertical","delay","setInterval","paused","ended","zoom","optimalZoom","imageData","brightness","autoBrightnessValue","sharpness","convolute","frameRate","setCallBack","DecodeWorker","beepSound","resultFunction","lastImageSrc","flipped","flipMode","toDataURL","getImageLightness","g","avg","pixels","d","colorSum","adjustment","v","cont","thres","weights","opaque","sw","sh","side","halfSide","tmpCanvas","tmpCtx","createImageData","dst","alphaFac","sy","sx","dstOff","cy","cx","scy","scx","srcOff","wt","buildSelectMenu","selectorVideo","videoSelect","html","enumerateDevices","devices","forEach","device","gotSources","children","prop","getDevicesError","NotSupportError","appendTo","testListDevices","kind","face","facing","text","label","concat","console","id","deviceId","parseJSON","JSON","stringify","toString","optional","sourceId","audio","navigator","mozGetUserMedia","webkitGetUserMedia","c","Promise","call","MediaStreamTrack","HTMLVideoElement","srcObject","URL","webkitURL","createObjectURL","Worker","initialized","mandatory","maxWidth","maxHeight","beep","resText","canPlayFunction","Error","tagName","toLowerCase","alert","Audio","selector","getOptimalZoom","getLastImageSrc","isInitialized","fn","each","jQuery","WebCodeCamJQueryTxt","HTMLElement","WebCodeCamJQueryArg","aChild","querySelector","appendChild","WebCodeCamJQueryOptions","DecodeQRCodeRate","DecodeBarCodeRate","ready"],"mappings":"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","file":"qrreader.js","sourcesContent":["/* --------------------------------------------------\nJavascript Only Barcode_Reader V1.5 by Eddie Larsson <https://github.com/EddieLa/BarcodeReader>\n\nThis software is provided under the MIT license, http://opensource.org/licenses/MIT.\nAll use of this software must include this\ntext, including the reference to the creator of the original source code. The\noriginator accepts no responsibility of any kind pertaining to\nuse of this software.\n\nCopyright (c) 2013 Eddie Larsson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n------------------------ */\n\nfunction CropTable(x,y,w,h){\n\tif(w-x<Image.width&&w-x>0) Image.table = Image.table.slice(x,w);\n\tif(h-y<Image.height&&h-y>0) {\n\t\tfor(var i=0;i<Image.table.length;i++){\n\t\t\tImage.table[i] = Image.table[i].slice(y,h);\n\t\t};\n\t};\n\tif(Image.width!==Image.table.length||Image.height!==Image.table[0].length) {\n\t\tImage.width = Image.table.length;\n\t\tImage.height = Image.table[0].length;\n\t\tCreateImageData();\n\t}\n};\n\nfunction Log(message) {\n\tpostMessage({result: message, success: \"log\"});\n}\n\nfunction flipTable() {\n\tfor(var i = 0; i < Image.table.length; i++) {\n\t\tImage.table[i].reverse();\n\t}\n\tImage.table.reverse();\n\tCreateImageData();\n}\n\nfunction rotateTableRight() {\n\tvar tempTable = [];\n\tvar tempArray=[]\n\tfor(var i=Image.table[0].length-1;i>=0;i--){\n\t\ttempArray=[];\n\t\tfor(var j=0;j<Image.table.length;j++){\n\t\t\ttempArray.push(Image.table[j][i]);\n\t\t};\n\t\ttempTable.push(tempArray);\n\t};\n\tImage.table = tempTable;\n\tImage.width = Image.table.length;\n\tImage.height = Image.table[0].length;\n\tCreateImageData();\n}\n\nfunction rotateTableLeft() {\n\tvar tempTable = [];\n\tvar tempArray=[]\n\tfor(var i=0;i < Image.table[0].length;i++){\n\t\ttempArray=[];\n\t\tfor(var j=Image.table.length-1;j>=0;j--){\n\t\t\ttempArray.push(Image.table[j][i]);\n\t\t};\n\t\ttempTable.push(tempArray);\n\t};\n\tImage.table = tempTable;\n\tImage.width = Image.table.length;\n\tImage.height = Image.table[0].length;\n\tCreateImageData();\n}\n\nfunction RemoveDist(){\n\tvar Distance=0;\n\tvar Count=0;\n\tvar DistanceHolder=[];\n\tvar DeclineValue;\n\tfor(var y=0;y<Image.height;y++){\n\t\tDistance=0;\n\t\tCount=0;\n\t\tfor(var x=0;x<Image.width;x++){\n\t\t\tif((Image.table[x][y][0]+Image.table[x][y][1]+Image.table[x][y][2])/3<100){\n\t\t\t\tdo{\n\t\t\t\t\tCount++;\n\t\t\t\t\tx++\n\t\t\t\t\tif(x>=Image.width){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}while((Image.table[x][y][0]+Image.table[x][y][1]+Image.table[x][y][2])/3<100)\n\t\t\t\tif(x<Image.width){\n\t\t\t\t\tDeclineValue=(Image.table[x][y][0]+Image.table[x][y][1]+Image.table[x][y][2])/3\n\t\t\t\t\tdo{\n\t\t\t\t\t\tDistance++;\n\t\t\t\t\t\tx++\n\t\t\t\t\t\tif(x>=Image.width){\n\t\t\t\t\t\t\tDistance=0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}while((Image.table[x][y][0]+Image.table[x][y][1]+Image.table[x][y][2])/3>DeclineValue)\n\t\t\t\t}\n\t\t\t\tif(Distance>Count*4){\n\t\t\t\t\tDistanceHolder.push(x);\n\t\t\t\t}else{\n\t\t\t\t\tDistanceHolder.push(0);\n\t\t\t\t}\n\t\t\t\tx=Image.width;\n\t\t\t}\n\t\t}\n\t}\n\tCount=0;\n\tfor(var i=0;i<DistanceHolder.length;i++){\n\t\tCount+=DistanceHolder[i];\n\t}\n\tCount/=DistanceHolder.length;\n\tif(Count>20) CropTable(Math.floor(Count),0,Image.width,Image.height);\n}\n\nfunction verticalAreas() {\n\tdataCopy = new Uint8ClampedArray(Image.data);\n\tif(LowLight) {\n\t\tcontrastBinary(dataCopy);\n\t} else {\n\t\tcontrast(dataCopy,250);\n\t\tbinary(dataCopy,100);\n\t}\n\tvar mainStart = Image.width*4*(Math.round(Image.height/2));\n\tvar cordArray = [];\n\tvar start;\n\tvar counter;\n\tfor(var i = mainStart; i < mainStart+Image.width*4;i+=4) {\n\t\tif(dataCopy[i] === 0) {\n\t\t\tstart = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tvar tempCord;\n\tvar wasWhite = false;\n\tvar tempStart = start;\n\tfor(var i = start; i < mainStart+Image.width*4;i+=4) {\n\t\tif(dataCopy[i] === 255) {\n\t\t\tcounter++;\n\t\t\tif(wasWhite == false) {\n\t\t\t\ttempCord = i;\n\t\t\t\twasWhite = true;\n\t\t\t}\n\t\t\tif(counter > 30) {\n\t\t\t\tif(tempStart-mainStart > 40) {\n\t\t\t\t\ttempStart -= 40;\n\t\t\t\t}\n\t\t\t\tcordArray.push([(tempStart-mainStart)/4,(tempCord-mainStart)/4])\n\t\t\t\twhile(dataCopy[i] === 255 && i < mainStart+Image.width*4) {\n\t\t\t\t\ti+=4;\n\t\t\t\t}\n\t\t\t\ttempStart = i;\n\t\t\t}\n\t\t}else {\n\t\t\tcounter = 0;\n\t\t\twasWhite = false;\n\t\t}\n\t}\n\treturn cordArray;\n}\n\nfunction InterestAreas(step,start){\n\tdataCopy = new Uint8ClampedArray(Image.data);\n\tif(LowLight) {\n\t\tcontrastBinary(dataCopy);\n\t} else {\n\t\tcontrast(dataCopy,250);\n\t\tbinary(dataCopy,100);\n\t}\n\tvar LoopExit=10;\n\tvar percentage=6.0;\n\tvar cordsY=0;\n\tvar previous=-1;\n\tdo{\n\t\tdo{\n\t\t\tcordsY=HorizontalArea(dataCopy,cordsY,percentage)\n\t\t\tLoopExit--\n\t\t}while((typeof cordsY)==(typeof 5)&&LoopExit);\n\t\tif(cordsY[1]-cordsY[0]<25){\n\t\t\tif(percentage>1.0){\n\t\t\t\tcordsY=cordsY[1];\n\t\t\t\tpercentage-=0.5;\n\t\t\t\tLoopExit=10;\n\t\t\t}\n\t\t}else{\n\t\t\tif(percentage>1.0){\n\t\t\t\tif(previous!==cordsY[0]){\n\t\t\t\t\tprevious=cordsY[0];\n\t\t\t\t\tif(typeof cordsY !== typeof 5) allAreas.push(cordsY);\n\t\t\t\t\tcordsY=cordsY[1];\n\t\t\t\t\tpercentage-=0.5;\n\t\t\t\t\tLoopExit=10;\n\t\t\t\t}else{\n\t\t\t\t\tcordsY=0;\n\t\t\t\t\tpercentage-=0.5;\n\t\t\t\t\tLoopExit=10;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}while(typeof cordsY === typeof 5)\n}\n\nfunction CreateImageData(){\n\tImage.data = new Uint8ClampedArray(Image.width*Image.height*4);\n\tvar Converter;\n\tfor(var y=0;y<Image.height;y++){\n\t\tfor(var x=0;x<Image.width;x++){\n\t\t\tConverter = y*4*Image.width;\n\t\t\tImage.data[Converter+x*4] = Image.table[x][y][0];\n\t\t\tImage.data[Converter+x*4+1] = Image.table[x][y][1];\n\t\t\tImage.data[Converter+x*4+2] = Image.table[x][y][2];\n\t\t\tImage.data[Converter+x*4+3] = Image.table[x][y][3];\n\t\t};\n\t};\n};\n\nfunction BlackEdges(threshold){\n\tvar avrg=0;\n\tvar whiteArray=[];\n\tfor(var i=0;i<Image.height;i++){\n\t\twhiteArray.push([255,255,255,255]);\n\t}\n\tfor(var x=0;x<Image.width;x++){\n\t\tavrg=0;\n\t\tfor(var y=0;y<Image.height;y++){\n\t\t\tavrg+=(Image.table[x][y][0]+Image.table[x][y][1]+Image.table[x][y][2])/3\n\t\t}\n\t\tavrg/=Image.height;\n\t\tif(avrg<threshold){\n\t\t\tImage.table[x]=whiteArray.slice();\n\t\t}else{\n\t\t\tImage.table[x]=whiteArray.slice();\n\t\t\tImage.table[x+1]=whiteArray.slice()\n\t\t\tbreak;\n\t\t}\n\t};\n\tfor(var x=Image.width-1;x>=0;x--){\n\t\tavrg=0;\n\t\tfor(var y=0;y<Image.height;y++){\n\t\t\tavrg+=(Image.table[x][y][0]+Image.table[x][y][1]+Image.table[x][y][2])/3\n\t\t}\n\t\tavrg/=Image.height;\n\t\tif(avrg<threshold){\n\t\t\tImage.table[x]=whiteArray.slice();\n\t\t}else{\n\t\t\tbreak;\n\t\t}\n\t};\n\tCreateImageData();\n}\n\nfunction CreateTable() {\n\tImage.table = [];\n\tvar tempArray=[]\n\tfor(var i=0;i<Image.width*4;i+=4){\n\t\ttempArray=[];\n\t\tfor(var j=i;j<Image.data.length;j+=Image.width*4){\n\t\t\ttempArray.push([Image.data[j],Image.data[j+1],Image.data[j+2],Image.data[j+3]]);\n\t\t};\n\t\tImage.table.push(tempArray);\n\t};\n};\n\nfunction EnlargeTable(h,w){\n\tvar TempArray = [];\n\tfor(var x=0;x<Image.width;x++){\n\t\tTempArray = [];\n\t\tfor(var y=0;y<Image.height;y++){\n\t\t\tfor(var i=0;i<h;i++){\n\t\t\t\tTempArray.push(Image.table[x][y]);\n\t\t\t}\n\t\t}\n\t\tImage.table[x]=TempArray.slice();\n\t}\n\tTempArray=Image.table.slice();\n\tfor(var x=0;x<Image.width;x++){\n\t\tfor(var i=0;i<w;i++){\n\t\t\tImage.table[x*w+i]=TempArray[x].slice();\n\t\t}\n\t}\n\tImage.width = Image.table.length;\n\tImage.height = Image.table[0].length;\n\tCreateImageData();\n}\n\t\t\t\nfunction ScaleHeight(scale) {\n\tvar tempArray=[]\n\tvar avrgRed=0;\n\tvar avrgGreen=0;\n\tvar avrgBlue=0;\n\tfor(var i=0;i<Image.height-scale;i+=scale){\n\t\tfor(var j=0;j<Image.width;j++){\n\t\t\tavrgRed=0;\n\t\t\tavrgGreen=0;\n\t\t\tavrgBlue=0;\n\t\t\tfor(var k=i;k<i+scale;k++){\n\t\t\t\tavrgRed+=Image.table[j][k][0]\n\t\t\t\tavrgGreen+=Image.table[j][k][1]\n\t\t\t\tavrgBlue+=Image.table[j][k][2];\n\t\t\t}\n\t\t\ttempArray.push(avrgRed/scale);\n\t\t\ttempArray.push(avrgGreen/scale);\n\t\t\ttempArray.push(avrgBlue/scale);\n\t\t\ttempArray.push(255);\n\t\t}\n\t}\n\treturn new Uint8ClampedArray(tempArray);\n}\n\nfunction ImgProcessing() {\n\tvar dataCopy = new Uint8ClampedArray(Image.data);\n\tif(LowLight) {\n\t\tcontrastBinary(dataCopy);\n\t} else {\n\t\tcontrast(dataCopy,255);\n\t\tbinary(dataCopy,110);\n\t}\n\tvar BlackEdge=TrimBlack(dataCopy)\n\tCropTable(BlackEdge[0],0,BlackEdge[1],Image.height)\n\tallAreas=[]\n\tvar coordHolder;\n\tvar tempTable=Image.table.slice();\n\tInterestAreas();\n\tif(allAreas.length===0){\n\t\tallAreas.push(averageLines());\n\t}\n\tif(Image.height-allAreas[allAreas.length-1][1]>30){\n\t\tCropTable(0,allAreas[allAreas.length-1][1],Image.width,Image.height)\n\t\tImage.width = Image.table.length;\n\t\tImage.height = Image.table[0].length;\n\t\tCreateImageData();\n\t\tInterestAreas()\n\t\tImage.table=tempTable.slice();\n\t\tImage.width = Image.table.length;\n\t\tImage.height = Image.table[0].length;\n\t\tCreateImageData();\n\t};\n\tvar allTables=[];\n\tImage.table=tempTable.slice();\n\tImage.width = Image.table.length;\n\tImage.height = Image.table[0].length;\n\tfor(var i=0;i<allAreas.length;i++){\n\t\tcoordHolder=allAreas[i];\n\t\tif(coordHolder[1] > Image.height) coordHolder[1] = Image.height;\n\t\tCropTable(0,coordHolder[0],Image.width,coordHolder[1])\n\t\tallTables.push(Image.table.slice());\n\t\tImage.table=tempTable.slice();\n\t\tImage.width = Image.table.length;\n\t\tImage.height = Image.table[0].length;\n\t}\n\tvar tempLength = allTables.length;\n\tfor(var i = 0; i < tempLength; i++) {\n\t\tImage.table = allTables[i];\n\t\tImage.width = Image.table.length;\n\t\tImage.height = Image.table[0].length;\n\t\tCreateImageData();\n\t\tvar resultVertical = verticalAreas();\n\t\tif(resultVertical.length > 1) {\n\t\t\ttempSecondTable = Image.table.slice();\n\t\t\tCropTable(0,0,resultVertical[0][1],Image.height);\n\t\t\tallTables[i] = Image.table.slice();\n\t\t\tfor(var j = 1; j < resultVertical.length; j++) {\n\t\t\t\tImage.table = tempSecondTable.slice();\n\t\t\t\tImage.width = Image.table.length;\n\t\t\t\tImage.height = Image.table[0].length;\n\t\t\t\tCropTable(resultVertical[j][0],0,resultVertical[j][1],Image.height);\n\t\t\t\tallTables.push(Image.table.slice());\n\t\t\t}\n\t\t}\n\t}\n\treturn allTables;\n}\n\nfunction contrast(data,amount) {\n\tamount = Math.max(0,Math.min(255,parseFloat(amount)||127));\n\n\tvar TempArray = [];\n\tfor (var i=0; i<256; i++) {\n\t\tvar value = Math.tan(amount * Math.PI/180) * (i-127) + 127;\n\t\tif (value > 255) {\n\t\t\tvalue = 255;\n\t\t} else if (value < 0) {\n\t\t\tvalue = 0;\n\t\t}\n\t\tTempArray[i] = value | 0;\n\t}\n\n\tfor (var i=0, len=Image.width*Image.height*4; i<len; i+=4) {\n\t\tdata[i]   = TempArray[data[i]];\n\t\tdata[i+1] = TempArray[data[i+1]];\n\t\tdata[i+2] = TempArray[data[i+2]];\n\t}\n}\n\nfunction binary(data,threshold) {\n\tthreshold = Math.max(0,Math.min(255,parseFloat(threshold)||127));\n\n\tvar ave;\n\n\tfor (var i=0, len=Image.width*Image.height*4; i<len; i+=4) {\n\t\tave = (data[i] + data[i+1] + data[i+2]) / 3;\n\t\tif (ave < threshold) {\n\t\t\tdata[i] = data[i+1] = data[i+2] = 0;\n\t\t} else {\n\t\t\tdata[i] = data[i+1] = data[i+2] = 255;\n\t\t}\n\t\tdata[i+3] = 255;\n\t}\n}\n\nfunction TrimBlack(img){\n\tvar x_coordinates=[]\n\tvar count=0;\n\tfor(var j=0;j<img.length;j+=4){\n\t\tfor(var i=j;i<img.length;i+=Image.width*4){\n\t\t\tcount+=img[i];\n\t\t}\n\t\tif(count/Image.height>100){\n\t\t\tx_coordinates.push((j/4)%Image.width);\n\t\t\tbreak;\n\t\t}\n\t\tcount=0;\n\t}\n\tcount=0;\n\tfor(var j=(Image.width*4-4);j>0;j-=4){\n\t\tfor(var i=j;i<img.length;i+=Image.width*4){\n\t\t\tcount+=img[i];\n\t\t}\n\t\tif(count/Image.height>100){\n\t\t\tx_coordinates.push((j/4)%Image.width);\n\t\t\tbreak;\n\t\t}\n\t\tcount=0;\n\t}\n\n\treturn x_coordinates;\n}\n\nfunction HorizontalArea(img,begin,area){\n\tbegin = typeof begin !== 'undefined' ? begin : 1;\n\tbegin = begin>0 ? begin : 1;\n\tvar BlackArea=0;\n\tvar start=0;\n\tvar count=0;\n\tfor(var i=(begin*4*Image.width);i<img.length/area;i+=Image.width*4){\n\t\tfor(var j=0;j<Image.width*4;j+=4){\n\t\t\tcount+=img[j+i];\n\t\t}\n\t\tif(count/Image.width>230){\n\t\t\tstart=i;\n\t\t\tbreak;\n\t\t}\n\t\tcount=0;\n\t}\n\tvar ending=0;\n\tcount=0;\n\tif(start){\n\t\tfor(var i=start;i<img.length;i+=Image.width*4){\n\t\t\tfor(var j=0;j<Image.width*4;j+=4){\n\t\t\t\tif(img[j+i]===0){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count>Image.width/5){\n\t\t\t\tBlackArea=i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount=0;\n\t\t}\n\t}else{\n\t\tfor(var i=(begin*4*Image.width);i<img.length;i+=Image.width*4){\n\t\t\tfor(var j=0;j<Image.width*4;j+=4){\n\t\t\t\tcount+=img[j+i];\n\t\t\t}\n\t\t\tif(count/Image.width>230){\n\t\t\t\tending=i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount=0;\n\t\t}\n\t}\n\tif(start){\n\t\treturn Math.round(BlackArea/4/Image.width);\n\t}else{\n\t\treturn [begin,Math.round(ending/4/Image.width)];\n\t}\n}\n\nfunction averageLines(){\n\tvar average=0;\n\tvar allAverage=[];\n\tfor(var i=0;i<Image.data.length;i+=Image.width*4){\n\t\taverage=0;\n\t\tfor(var j=i;j<(Image.width*4+i);j+=4){\n\t\t\taverage+=(Image.data[j]+Image.data[j+1]+Image.data[j+2])/3\n\t\t}\n\t\taverage/=Image.width;\n\t\tallAverage.push(average);\n\t}\n\tvar Ycoords=[]\n\taverage=0;\n\tvar comparison=allAverage[0]\n\tfor(var i=1;i<allAverage.length;i++){\n\t\tif(Math.abs(allAverage[i]-comparison)>13){\n\t\t\tYcoords.push([average,i-1]);\n\t\t\taverage=i;\n\t\t\tcomparison=allAverage[i];\n\t\t}\n\t}\n\taverage=0;\n\tvar result=[0,Image.height];\n\tfor(var i=0;i<Ycoords.length;i++){\n\t\tif((Ycoords[i][1]-Ycoords[i][0])>average){\n\t\t\taverage=Ycoords[i][1]-Ycoords[i][0];\n\t\t\tresult=Ycoords[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nfunction Main(){\n\tvar tableSelection=ImgProcessing();\n\tvar successfulDecodings = 0;\n\tfor(var z=0;z<tableSelection.length;z++){\n\t\tImage.table=tableSelection[z];\n\t\tImage.width = Image.table.length;\n\t\tImage.height = Image.table[0].length;\n\t\tCreateImageData();\n\t\tvar Selection = averageLines();\n\t\tCropTable(0,Selection[0],Image.width,Selection[1]);\n\t\tBlackEdges(100);\n\t\tRemoveDist();\n\t\tvar scaled = ScaleHeight(30);\n\t\tvar variationData;\n\t\tvar incrmt=0;\n\t\tvar format = \"\";\n\t\tvar eanStatistics = {};\n\t\tvar eanOrder = [];\n\t\tSelection = false;\n\t\tdo{\n\t\t\tvariationData = yStraighten(scaled.subarray(incrmt,incrmt+Image.width*4))\n\t\t\tfor(var i = 0; i < FormatPriority.length; i++) {\n\t\t\t\tif(format != \"EAN-13\") {\n\t\t\t\t\tif(FormatPriority[i] == \"Code128\") {\n\t\t\t\t\t\tSelection=BinaryString(variationData,0);\n\t\t\t\t\t\tif(Selection.string) {\n\t\t\t\t\t\t\tformat = Selection.format;\n\t\t\t\t\t\t\tSelection = Selection.string;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(FormatPriority[i] == \"Code93\") {\n\t\t\t\t\t\tSelection=BinaryString(variationData,1);\n\t\t\t\t\t\tif(Selection) format = \"Code93\";\n\t\t\t\t\t}\n\t\t\t\t\tif(FormatPriority[i] == \"Code39\") {\n\t\t\t\t\t\tSelection=BinaryString(variationData,2);\n\t\t\t\t\t\tif(Selection) format = \"Code39\";\n\t\t\t\t\t}\n\t\t\t\t\tif(FormatPriority[i] == \"2Of5\" || FormatPriority[i] == \"Inter2Of5\") {\n\t\t\t\t\t\tif(FormatPriority[i] == \"2Of5\") {\n\t\t\t\t\t\t\tSelection = BinaryString(variationData, 4);\n\t\t\t\t\t\t\tif(Selection) format = \"Standard 2 of 5\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tSelection = BinaryString(variationData, 5);\n\t\t\t\t\t\t\tif(Selection) format = \"Interleaved 2 of 5\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(FormatPriority[i] == \"EAN-13\") {\n\t\t\t\t\tvar tempObj = BinaryString(variationData,3);\n\t\t\t\t\tSelection=tempObj.string;\n\t\t\t\t\tif(Selection){\n\t\t\t\t\t\tformat = \"EAN-13\";\n\t\t\t\t\t\tif(typeof eanStatistics[Selection] == 'undefined') {\n\t\t\t\t\t\t\teanStatistics[Selection] = {count: 1,correction: tempObj.correction};\n\t\t\t\t\t\t\teanOrder.push(Selection);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\teanStatistics[Selection].count = eanStatistics[Selection].count+1;\n\t\t\t\t\t\t\teanStatistics[Selection].correction = eanStatistics[Selection].correction + tempObj.correction;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!Ean13Speed) Selection = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(Selection) break;\n\t\t\t}\n\t\t\tincrmt+=Image.width*4;\n\t\t}while(!Selection&&incrmt<scaled.length)\n\t\tif(Selection&&format != \"EAN-13\") {\n\t\t\tpostMessage({result: [Selection], success: true, finished: false});\n\t\t\tsuccessfulDecodings++;\n\t\t}\n\t\tif(format == \"EAN-13\" && !Ean13Speed) Selection = false;\n\t\tif(!Selection){\n\t\t\tEnlargeTable(4,2);\n\t\t\tincrmt=0;\n\t\t\tscaled = ScaleHeight(20);\n\t\t\tdo{\n\t\t\t\tvariationData = yStraighten(scaled.subarray(incrmt,incrmt+Image.width*4))\n\t\t\t\tfor(var i = 0; i < FormatPriority.length; i++) {\n\t\t\t\t\tif(format != \"EAN-13\") {\n\t\t\t\t\t\tif(FormatPriority[i] == \"Code128\") {\n\t\t\t\t\t\t\tSelection=BinaryString(variationData,0);\n\t\t\t\t\t\t\tif(Selection.string) {\n\t\t\t\t\t\t\t\tformat = Selection.format;\n\t\t\t\t\t\t\t\tSelection = Selection.string;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(FormatPriority[i] == \"Code93\") {\n\t\t\t\t\t\t\tSelection=BinaryString(variationData,1);\n\t\t\t\t\t\t\tif(Selection) format = \"Code93\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(FormatPriority[i] == \"Code39\") {\n\t\t\t\t\t\t\tSelection=BinaryString(variationData,2);\n\t\t\t\t\t\t\tif(Selection) format = \"Code39\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(FormatPriority[i] == \"2Of5\" || FormatPriority[i] == \"Inter2Of5\") {\n\t\t\t\t\t\t\tif(FormatPriority[i] == \"2Of5\") {\n\t\t\t\t\t\t\t\tSelection = BinaryString(variationData, 4);\n\t\t\t\t\t\t\t\tif(Selection) format = \"Standard 2 of 5\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tSelection = BinaryString(variationData, 5);\n\t\t\t\t\t\t\t\tif(Selection) format = \"Interleaved 2 of 5\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(FormatPriority[i] == \"EAN-13\") {\n\t\t\t\t\t\tvar tempObj = BinaryString(variationData,3);\n\t\t\t\t\t\tSelection=tempObj.string;\n\t\t\t\t\t\tif(Selection){\n\t\t\t\t\t\t\tformat = \"EAN-13\";\n\t\t\t\t\t\t\tif(typeof eanStatistics[Selection] == 'undefined') {\n\t\t\t\t\t\t\t\teanStatistics[Selection] = {count: 1,correction: tempObj.correction};\n\t\t\t\t\t\t\t\teanOrder.push(Selection);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\teanStatistics[Selection].count = eanStatistics[Selection].count+1;\n\t\t\t\t\t\t\t\teanStatistics[Selection].correction = eanStatistics[Selection].correction + tempObj.correction;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!Ean13Speed) Selection = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(Selection) break;\n\t\t\t\t}\n\t\t\t\tincrmt+=Image.width*4;\n\t\t\t}while(!Selection&&incrmt<scaled.length)\n\t\t\tif(Selection && format != \"EAN-13\") {\n\t\t\t\tpostMessage({result: [Selection], success: true, finished: false});\n\t\t\t\tsuccessfulDecodings++;\n\t\t\t}\n\t\t}\n\t\tif(format == \"EAN-13\") {\n\t\t\tvar points = {};\n\t\t\tfor(var key in eanStatistics) {\n\t\t\t\teanStatistics[key].correction = eanStatistics[key].correction/eanStatistics[key].count;\n\t\t\t\tvar pointTemp = eanStatistics[key].correction;\n\t\t\t\tif(Ean13Speed) {\n\t\t\t\t\tpointTemp -= eanStatistics[key].count*4;\n\t\t\t\t} else {\n\t\t\t\t\tpointTemp -= eanStatistics[key].count;\n\t\t\t\t}\n\t\t\t\tpointTemp += eanOrder.indexOf(key);\n\t\t\t\tpoints[key] = pointTemp;\n\t\t\t}\n\t\t\tvar minPoints = Number.POSITIVE_INFINITY;\n\t\t\tvar tempString = \"\";\n\t\t\tfor(var key in points) {\n\t\t\t\tif(points[key] < minPoints) {\n\t\t\t\t\tminPoints =  points[key];\n\t\t\t\t\ttempString = key;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(minPoints < 11) {\n\t\t\t\tSelection = tempString;\n\t\t\t} else {\n\t\t\t\tSelection = false;\n\t\t\t}\n\t\t\tif(Selection) {\n\t\t\t\tpostMessage({result: [Selection], success: true, finished: false});\n\t\t\t\tsuccessfulDecodings++;\n\t\t\t}\n\t\t}\n\t\tif(successfulDecodings >= DecodeNr) break;\n\t}\n\treturn [];\n}\n\nfunction yStraighten(img){\n\tvar average=0;\n\tvar threshold;\n\tvar newImg = new Uint8ClampedArray(Image.width*150*4);\n\tfor(var i=0;i<newImg.length;i++){\n\t\tnewImg[i]=255;\n\t}\n\tfor(var i=0;i<Image.width*4;i+=4){\n\t\tthreshold=180\n\t\taverage=(img[i]+img[i+1]+img[i+2])/3;\n\t\taverage+=(img[i+4]+img[i+5]+img[i+6])/3;\n\t\taverage/=2;\n\t\tfor(var j=i;j<newImg.length;j+=Image.width*4){\n\t\t\tif(average<threshold){\n\t\t\t\tnewImg[j]=newImg[j+1]=newImg[j+2]=0;\n\t\t\t}\n\t\t\tthreshold--;\n\t\t}\n\t}\n\treturn newImg;\n}\n\nfunction TwoOfFiveStartEnd(values, start) {\n\tif(values.length < 5 || values.length > 6) return false;\n\tvar max = [[0,0],[0,0]];\n\tfor(var u = 0; u < values.length; u++) {\n\t\tif(values[u] > max[0][0]) {\n\t\t\tmax[0][0] = values[u];\n\t\t\tvar prevpos = max[0][1];\n\t\t\tmax[0][1] = u;\n\t\t\tu = prevpos;\n\t\t}\n\t\tif(values[u] > max[1][0] && u != max[0][1]) {\n\t\t\tmax[1][0] = values[u];\n\t\t\tmax[1][1] = u;\n\t\t}\n\t}\n\tvar wideAvrg = max[0][0] + max[1][0];\n\twideAvrg /= 2;\n\tif(max[0][0] / wideAvrg > 1.2 || max[0][0] / wideAvrg < 0.8) return false;\n\tif(max[1][0] / wideAvrg > 1.2 || max[1][0] / wideAvrg < 0.8) return false;\n\tvar narrowAvrg = 0;\n\tfor(var i = 0; i < values.length; i++) {\n\t\tif(i == max[0][1] || i == max[1][1]) continue;\n\t\tnarrowAvrg += values[i];\n\t}\n\tnarrowAvrg /= values.length - 2;\n\tfor(var i = 0; i < values.length; i++) {\n\t\tif(i == max[0][1] || i == max[1][1]) continue;\n\t\tif(values[i] / narrowAvrg > 1.4 || values[i] / narrowAvrg < 0.6) return false;\n\t}\n\tif(start) {\n\t\treturn (max[0][1] == 0 || max[0][1] == 2) && (max[1][1] == 0 || max[1][1] == 2);\n\t}else {\n\t\treturn (max[0][1] == 0 || max[0][1] == 4) && (max[1][1] == 0 || max[1][1] == 4);\n\t}\n}\n\nfunction CheckInterleaved(values, start) {\n\tvar average = 0;\n\tfor(var i = 0; i < values.length; i++) {\n\t\taverage += values[i];\n\t}\n\taverage /= 4;\n\tif(start) {\n\t\tif(values.length != 4) return false;\n\t\tfor(var i = 0; i < values.length; i++) {\n\t\t\tif(values[i]/average < 0.8 || values[i]/average > 1.2) return false;\n\t\t}\n\t\treturn true;\n\t} else {\n\t\tif(values.length != 3) return false;\n\t\tvar max = 0;\n\t\tvar pos;\n\t\tfor(var i = 0; i < values.length; i++) {\n\t\t\tif(values[i] > max) {\n\t\t\t\tmax = values[i];\n\t\t\t\tpos = i;\n\t\t\t}\n\t\t}\n\t\tif(pos != 0) return false;\n\t\tif(values[0]/average < 1.5 || values[0]/average > 2.5) return false;\n\t\tfor(var i = 1; i < values.length; i++) {\n\t\t\tif(values[i]/average < 0.5 || values[i]/average > 1.5) return false;\n\t\t}\n\t\treturn true;\n\t}\n}\n\nfunction contrastBinary(data) {\n    var min = 127 * 3;\n    var max = 128 * 3;\n    for (var i = 0, len = Image.width * Image.height * 4; i < len; i += 4) {\n        var val = data[i] + data[i + 1] + data[i + 2];\n        if (val < min) {\n            min = val;\n        } else if (val > max) {\n            max = val;\n        }\n    }\n    var threshold = (max + min) / 2;\n    for (var i = 0, len = Image.width * Image.height * 4; i < len; i += 4) {\n        ave = (data[i] + data[i + 1] + data[i + 2]);\n        if (ave < threshold) {\n            data[i] = data[i + 1] = data[i + 2] = 0;\n        } else {\n            data[i] = data[i + 1] = data[i + 2] = 255;\n        }\n        data[i + 3] = 255;\n    }\n}\n\nfunction BinaryString(img,type){\n\tvar binaryString=[];\n\tvar binTemp=[];\n\tvar count=0;\n\tvar bars;\n\tvar len;\n\tvar totalBars;\n\tvar skipWhite = false;\n\tif(type == 0) {\n\t\ttotalBars = 6;\n\t}\n\tif(type == 1) {\n\t\ttotalBars = 6;\n\t}\n\tif(type == 2) {\n\t\ttotalBars = 9;\n\t}\n\tif(type == 3) {\n\t\ttotalBars = 4;\n\t}\n\tif(type == 4) {\n\t\ttotalBars = 5;\n\t}\n\tif(type == 5) {\n\t\ttotalBars = 10;\n\t}\n\tvar trigger=false;\n\tvar container=255;\n\tvar firstEan = false;\n\tvar EanCounter = 0;\n\tvar corrections = 0;\n\tfor(var j=0;j<img.length - Image.width*4;j+=Image.width*4){\n\t\tvar SlicedArray = img.subarray(j,j+Image.width*4)\n\t\tlen = BarLength(SlicedArray);\n\t\tcorrections = 0\n\t\tif(type == 0 || type == 4) len/=2;\n\t\tbinaryString=[];\n\t\tbars=0;\n\t\tbinTemp=[]\n\t\tbinTempInter = []\n\t\ttrigger=false;\n\t\tvar switchTotal = false;\n\t\tfor(var i=0;i<SlicedArray.length;i+=4){\n\t\t\tcount=0;\n\t\t\tif(!trigger&&SlicedArray[i]===0){\n\t\t\t\ttrigger=true;\n\t\t\t\tfirstEan = true;\n\t\t\t\tif(type == 4) {\n\t\t\t\t\tcontainer=SlicedArray[i]\n\t\t\t\t\tvar TwoOfFiveBin = [0,0,0,0,0,0];\n\t\t\t\t\tdo{\n\t\t\t\t\t\tTwoOfFiveBin[count] = TwoOfFiveBin[count] + 1;\n\t\t\t\t\t\ti+=4;\n\t\t\t\t\t\tif(container != SlicedArray[i]) {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\tcontainer=SlicedArray[i]\n\t\t\t\t\t\t}\n\t\t\t\t\t}while(count < 6 && i < SlicedArray.length)\n\t\t\t\t\tif(!TwoOfFiveStartEnd(TwoOfFiveBin, true)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcount = 0;\n\t\t\t\t}\n\t\t\t\tif(type == 5) {\n\t\t\t\t\tcontainer=SlicedArray[i]\n\t\t\t\t\tvar interBin = [0,0,0,0];\n\t\t\t\t\tdo{\n\t\t\t\t\t\tinterBin[count] = interBin[count] + 1;\n\t\t\t\t\t\ti+=4;\n\t\t\t\t\t\tif(container != SlicedArray[i]) {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\tcontainer=SlicedArray[i]\n\t\t\t\t\t\t}\n\t\t\t\t\t}while(count < 4 && i < SlicedArray.length)\n\t\t\t\t\tif(!CheckInterleaved(interBin, true)) break;\n\t\t\t\t\tcount = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(trigger){\n\t\t\t\tcontainer=SlicedArray[i]\n\t\t\t\tdo{\n\t\t\t\t\tcount++;\n\t\t\t\t\ti+=4;\n\t\t\t\t\tif(type == 5 && count/len > 5) {\n\t\t\t\t\t\tvar checkData = []\n\t\t\t\t\t\tfor(var q = 0; q < binTemp.length; q++) {\n\t\t\t\t\t\t\tcheckData.push(binTemp[q]);\n\t\t\t\t\t\t\tif(q >= binTempInter.length) continue;\n\t\t\t\t\t\t\tcheckData.push(binTempInter[q]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!CheckInterleaved(checkData, false)) {\n\t\t\t\t\t\t\tbinaryString = [];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(i >= SlicedArray.length) break;\n\t\t\t\t}while(SlicedArray[i]===container)\n\t\t\t\tif(type == 2 && skipWhite) {\n\t\t\t\t\tskipWhite = false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(type != 4 || type != 5) count /= len;\n\t\t\t\tif(type == 5) {\n\t\t\t\t\tif(container == 0) {\n\t\t\t\t\t\tbinTemp.push(count);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbinTempInter.push(count);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbinTemp.push(count)\n\t\t\t\t}\n\t\t\t\tbars++;\n\t\t\t\tif(type == 4 && SlicedArray[i] == 255) {\n\t\t\t\t\tvar tempCounter = 0;\n\t\t\t\t\tdo{\n\t\t\t\t\t\ttempCounter++;\n\t\t\t\t\t\ti+=4;\n\t\t\t\t\t\tif(tempCounter/len > 3) {\n\t\t\t\t\t\tif(!TwoOfFiveStartEnd(binTemp, false)) {\n\t\t\t\t\t\t\tbinaryString = [];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t}while(SlicedArray[i] == 255 && i < SlicedArray.length)\n\t\t\t\t}\n\t\t\t\tif(type == 4 && i >= SlicedArray.length - 4) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\ti-=4;\n\t\t\t\t\t}while(SlicedArray[i] == 255 && i >= 0)\n\t\t\t\t\tcontainer = SlicedArray[i];\n\t\t\t\t\tvar TwoOfFiveBin = [0,0,0,0,0];\n\t\t\t\t\tcount = 0;\n\t\t\t\t\tdo{\n\t\t\t\t\t\tTwoOfFiveBin[count] = TwoOfFiveBin[count] + 1;\n\t\t\t\t\t\ti-=4;\n\t\t\t\t\t\tif(container != SlicedArray[i]) {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\tcontainer=SlicedArray[i]\n\t\t\t\t\t\t}\n\t\t\t\t\t}while(count < 5 && i >= 0)\n\t\t\t\t\tif(!TwoOfFiveStartEnd(TwoOfFiveBin, false)) {\n\t\t\t\t\t\tbinaryString = [];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcount = 0;\n\t\t\t\t}\n\t\t\t\tif(bars == 3 && type == 3 && firstEan) {\n\t\t\t\t\tbars = 0;\n\t\t\t\t\tbinTemp = [];\n\t\t\t\t\tfirstEan = false;\n\t\t\t\t}\n\t\t\t\tif(bars===totalBars){\n\t\t\t\t\tif(type == 3 && EanCounter == 6) {\n\t\t\t\t\t\tEanCounter = 0;\n\t\t\t\t\t\tbars = 0;\n\t\t\t\t\t\tif(switchTotal) {\n\t\t\t\t\t\t\ttotalBars = 4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbinTemp = [];\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(EanCounter == 5 && !switchTotal) {\n\t\t\t\t\t\tswitchTotal = true;\n\t\t\t\t\t\ttotalBars = 5;\n\t\t\t\t\t}\n\t\t\t\t\tbinaryString.push(binTemp)\n\t\t\t\t\tbars=0;\n\t\t\t\t\tbinTemp=[]\n\t\t\t\t\tif(type == 5) {\n\t\t\t\t\t\tbinaryString.push(binTempInter);\n\t\t\t\t\t\tbinTempInter = [];\n\t\t\t\t\t}\n\t\t\t\t\tif(type == 3) EanCounter++;\n\t\t\t\t\tif(type == 2) skipWhite = true;\n\t\t\t\t}\n\t\t\t\ti-=4;\n\t\t\t\tif(type == 3 && binaryString.length > 12) break;\n\t\t\t}\n\t\t}\n\t\tbinTemp=Distribution(binaryString,type);\n\t\tif(type == 3) {\n\t\t\tbinaryString = binTemp.data;\n\t\t\tcorrections = binTemp.correction;\n\t\t}else {\n\t\t\tbinaryString = binTemp;\n\t\t}\n\t\tif(binaryString.length>4){\n\t\t\tif(type == 0) {\n\t\t\t\tif(CheckCode128(binaryString)){\n\t\t\t\t\tbinaryString = DecodeCode128(binaryString);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}else if(type == 1) {\n\t\t\t\tif(CheckCode93(binaryString)) {\n\t\t\t\t\tbinaryString = DecodeCode93(binaryString);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}else if(type == 2) {\n\t\t\t\tif(CheckCode39(binaryString)) {\n\t\t\t\t\tbinaryString = DecodeCode39(binaryString);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if(type == 3) {\n\t\t\t\tvar tempString = DecodeEAN13(binaryString);\n\t\t\t\tif(tempString) {\n\t\t\t\t\tif(tempString.length === 13) {\n\t\t\t\t\t\tbinaryString = tempString;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if(type == 4 || type == 5) {\n\t\t\t\tvar tempString = Decode2Of5(binaryString);\n\t\t\t\tif(tempString) {\n\t\t\t\t\tbinaryString = tempString;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(type == 0) {\n\t\tif(typeof binaryString.string  === 'string') {\n\t\t\treturn binaryString;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(typeof binaryString  === 'string'){\n\t\tif(type == 3) {\n\t\t\treturn {string: binaryString, correction: corrections};\n\t\t} else {\n\t\t\treturn binaryString;\n\t\t}\n\t}else{\n\t\treturn false;\n\t}\n}\n\nfunction BarLength(img){\n\tvar counter=0;\n\tfor(var j=0;j<img.length;j+=4){\n\t\tif(img[j]===0){\n\t\t\tdo{\n\t\t\t\tcounter++;\n\t\t\t\tj+=4;\n\t\t\t}while(img[j]===0)\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn counter;\n}\n\nfunction Distribution(totalBinArray,type){\n\tvar testData = 0;\n\tvar result = [];\n\tvar totalBars;\n\tvar total;\n\tvar maxLength;\n\tif(type === 0) {\n\t\ttotal = 11;\n\t\ttotalBars = 6;\n\t\tmaxLength = 4;\n\t}else if(type === 1) {\n\t\ttotal = 9;\n\t\ttotalBars = 6;\n\t\tmaxLength = 4;\n\t}else if(type === 2) {\n\t\ttotal = 12;\n\t\ttotalBars = 9;\n\t}else if(type === 3) {\n\t\ttotal = 7;\n\t\ttotalBars = 4;\n\t\tmaxLength = 4;\n\t}\n\tfor(var k = 0; k < totalBinArray.length; k++) {\n\t\tvar BinArray = totalBinArray[k];\n\t\tvar sum=0;\n\t\tsum = 0;\n\t\tvar counter = 0;\n\t\tvar tempBin=[]\n\t\tvar narrowArr = [];\n\t\tvar wideArr = [];\n\t\tif(type == 4 || type == 5) {\n\t\t\tvar max = [[0,0], [0,0]];\n\t\t\tfor(var i = 0; i < BinArray.length; i++) {\n\t\t\t\tif(!isFinite(BinArray[i])) return [];\n\t\t\t\tif(BinArray[i] > max[0][0]) {\n\t\t\t\t\tmax[0][0] = BinArray[i];\n\t\t\t\t\tvar prevPos = max[0][1];\n\t\t\t\t\tmax[0][1] = i;\n\t\t\t\t\ti = prevPos - 1;\n\t\t\t\t}\n\t\t\t\tif(BinArray[i] > max[1][0] && i != max[0][1]) {\n\t\t\t\t\tmax[1][0] = BinArray[i];\n\t\t\t\t\tmax[1][1] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(Secure2Of5) {\n\t\t\t\twideAvrg = max[0][0] + max[1][0];\n\t\t\t\twideAvrg /= 2;\n\t\t\t\tif(max[0][0] / wideAvrg > 1.2 || max[0][0] / wideAvrg < 0.8) return [];\n\t\t\t\tif(max[1][0] / wideAvrg > 1.2 || max[1][0] / wideAvrg < 0.8) return [];\n\t\t\t\tnarrowAvrg = 0;\n\t\t\t\tfor(var i = 0; i < BinArray.length; i++) {\n\t\t\t\t\tif(i == max[0][1] || i == max[1][1]) continue;\n\t\t\t\t\tnarrowAvrg += BinArray[i];\n\t\t\t\t}\n\t\t\t\tnarrowAvrg /= 3;\n\t\t\t\tfor(var i = 0; i < BinArray.length; i++) {\n\t\t\t\t\tif(i == max[0][1] || i == max[1][1]) continue;\n\t\t\t\t\tif(BinArray[i] / narrowAvrg > 1.2 || BinArray[i] / narrowAvrg < 0.7) return [];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(var i = 0; i < BinArray.length; i++) {\n\t\t\t\tif(i == max[0][1] || i == max[1][1]) {\n\t\t\t\t\ttempBin.push(1);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ttempBin.push(0);\n\t\t\t}\n\t\t\tresult.push(tempBin);\n\t\t\tcontinue;\n\t\t}\n\t\twhile(counter<totalBars){\n\t\t\tsum+=BinArray[counter];\n\t\t\tcounter++\n\t\t}\n\t\tif(type === 2) {\n\t\t\tvar indexCount = [];\n\t\t\tfor(var i = 0; i < 3; i++) {\n\t\t\t\tvar max = 0;\n\t\t\t\tvar prevIndex;\n\t\t\t\tfor(var j = 0; j < BinArray.length; j++) {\n\t\t\t\t\tif(indexCount.indexOf(j) != -1) continue;\n\t\t\t\t\tif(BinArray[j] > max) {\n\t\t\t\t\t\tprevIndex=j;\n\t\t\t\t\t\tmax = BinArray[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twideArr.push(max);\n\t\t\t\tindexCount.push(prevIndex);\n\t\t\t}\n\t\t\tfor(var j = 0; j < BinArray.length; j++) {\n\t\t\t\tif(indexCount.indexOf(j) === -1) {\n\t\t\t\t\tnarrowArr.push(BinArray[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar minAvrg = 0;\n\t\t\tfor(var j = 0; j < narrowArr.length; j++) {\n\t\t\t\tminAvrg += narrowArr[j];\n\t\t\t}\n\t\t\tminAvrg/=narrowArr.length;\n\t\t\tvar maxAvrg = 0;\n\t\t\tfor(var j = 0; j < wideArr.length; j++) {\n\t\t\t\tmaxAvrg += wideArr[j];\n\t\t\t}\n\t\t\tmaxAvrg/=wideArr.length;\n\t\t\tmaxLength = maxAvrg/minAvrg;\n\t\t}\n\t\tcounter=0;\n\t\twhile(counter<totalBars){\n\t\t\ttempBin.push((BinArray[counter]/sum)*total);\n\t\t\tcounter++;\n\t\t}\n\t\tcounter=0;\n\t\twhile(counter<totalBars){\n\t\t\tif(type == 2) {\n\t\t\t\ttempBin[counter] = Math.abs(1-tempBin[counter]) < Math.abs(maxLength - tempBin[counter]) ? 1 : 2;\n\t\t\t} else {\n\t\t\t\ttempBin[counter] = tempBin[counter]>maxLength ? maxLength : tempBin[counter];\n\t\t\t\ttempBin[counter] = tempBin[counter]<1 ? 1 : tempBin[counter];\n\t\t\t\ttempBin[counter]=Math.round(tempBin[counter]);\n\t\t\t}\n\t\t\tcounter++;\n\t\t}\n\t\tif(type == 3) {\n\t\t\tvar checking = 0;\n\t\t\tfor(var i = 0; i < tempBin.length; i++) {\n\t\t\t\tchecking += tempBin[i];\n\t\t\t}\n\t\t\tif(checking > 7) {\n\t\t\t\tvar max = 0;\n\t\t\t\tvar hitIndex = 0;\n\t\t\t\tfor(var i = 0; i < tempBin.length; i++) {\n\t\t\t\t\tif(tempBin[i]>max) {\n\t\t\t\t\t\tmax = tempBin[i];\n\t\t\t\t\t\thitIndex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttempBin[hitIndex] = max - (checking - 7);\n\t\t\t}\n\t\t}\n\t\tif(type == 3) {\n\t\t\tfor(var i = 0; i < tempBin.length; i++) {\n\t\t\t\ttestData += Math.abs(tempBin[i]-(BinArray[i]/sum)*total);\n\t\t\t};\n\t\t}\n\t\tresult.push(tempBin);\n\t}\n\tif(type == 3) {\n\t\treturn {data: result,correction:testData};\n\t} else {\n\t\treturn result;\n\t}\n}\n\nfunction CheckCode128(string){\n\tvar checksum=string[string.length-2].join(\"\");\n\tchecksum = Code128Encoding.value.indexOf(checksum);\n\tvar failSafe = checksum != -1;\n\tvar summarizer = Code128Encoding.value.indexOf(string[0].join(\"\"));\n\tfailSafe = summarizer===-1 ? false : failSafe;\n\tfor(var i=1;i<(string.length-2);i++){\n\t\tsummarizer+=Code128Encoding.value.indexOf(string[i].join(\"\"))*i\n\t\tfailSafe = Code128Encoding.value.indexOf(string[i].join(\"\"))===-1 ? false : failSafe;\n\t}\n\treturn (summarizer%103===checksum)&&failSafe;\n}\n\nfunction Decode2Of5(string) {\n\tvar result = \"\";\n\tfor(var i = 0; i < string.length; i++) {\n\t\tif(TwoOfFiveEncoding.indexOf(string[i].join(\"\")) == -1) return false;\n\t\tresult += TwoOfFiveEncoding.indexOf(string[i].join(\"\"));\n\t}\n\treturn result;\n}\n\nfunction DecodeEAN13(string) {\n\tif(string.length != 12) return false;\n\tvar leftSide = string.slice(0,6);\n\tvar trigger = false;\n\tvar rightSide = string.slice(6,string.length);\n\tfor(var i = 0; i < leftSide.length; i++) {\n\t\tvar string = \"\";\n\t\tfor(var j = 0; j < leftSide[i][0]; j++) {\n\t\t\tstring += \"0\";\n\t\t}\n\t\tfor(var j = 0; j < leftSide[i][1]; j++) {\n\t\t\tstring += \"1\";\n\t\t}\n\t\tfor(var j = 0; j < leftSide[i][2]; j++) {\n\t\t\tstring += \"0\";\n\t\t}\n\t\tfor(var j = 0; j < leftSide[i][3]; j++) {\n\t\t\tstring += \"1\";\n\t\t}\n\t\tleftSide[i] = string;\n\t\tif(leftSide[i].length != 7){\n\t\t\ttrigger = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(trigger) return false;\n\tfor(var i = 0; i < rightSide.length; i++) {\n\t\tvar string = \"\";\n\t\tfor(var j = 0; j < rightSide[i][0]; j++) {\n\t\t\tstring += \"1\";\n\t\t}\n\t\tfor(var j = 0; j < rightSide[i][1]; j++) {\n\t\t\tstring += \"0\";\n\t\t}\n\t\tfor(var j = 0; j < rightSide[i][2]; j++) {\n\t\t\tstring += \"1\";\n\t\t}\n\t\tfor(var j = 0; j < rightSide[i][3]; j++) {\n\t\t\tstring += \"0\";\n\t\t}\n\t\trightSide[i] = string;\n\t\tif(rightSide[i].length != 7){\n\t\t\ttrigger = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(trigger) return false;\n\tvar decodeFormat = [];\n\tfor(var i = 0; i < leftSide.length; i++) {\n\t\tif(typeof EAN13Encoding[\"L\"][leftSide[i]] != 'undefined') {\n\t\t\tdecodeFormat.push(\"L\");\n\t\t} else if(typeof EAN13Encoding[\"G\"][leftSide[i]] != 'undefined') {\n\t\t\tdecodeFormat.push(\"G\");\n\t\t}else {\n\t\t\ttrigger = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(trigger) return false;\n\tvar resultArray = [];\n\tif(typeof EAN13Encoding.formats[decodeFormat.join(\"\")] == 'undefined') return false;\n\tresultArray.push(EAN13Encoding.formats[decodeFormat.join(\"\")]);\n\tfor(var i = 0; i < leftSide.length; i++) {\n\t\tif(typeof EAN13Encoding[decodeFormat[i]][leftSide[i]] == 'undefined') {\n\t\t\ttrigger = true;\n\t\t\tbreak;\n\t\t}\n\t\tresultArray.push(EAN13Encoding[decodeFormat[i]][leftSide[i]]);\n\t}\n\tif(trigger) return false;\n\tfor(var i = 0; i < rightSide.length; i++) {\n\t\tif(typeof EAN13Encoding[\"R\"][rightSide[i]] == 'undefined') {\n\t\t\ttrigger = true;\n\t\t\tbreak;\n\t\t}\n\t\tresultArray.push(EAN13Encoding[\"R\"][rightSide[i]]);\n\t}\n\tif(trigger) return false;\n\tvar weight = 3;\n\tvar sum = 0;\n\tfor(var i = resultArray.length-2; i >= 0; i--) {\n\t\tsum += resultArray[i]*weight;\n\t\tif(weight == 3) {\n\t\t\tweight = 1;\n\t\t} else {\n\t\t\tweight = 3;\n\t\t}\n\t}\n\tsum = (10 - sum%10)%10;\n\tif(resultArray[resultArray.length-1] == sum) {\n\t\treturn resultArray.join(\"\");\n\t}else {\n\t\treturn false;\n\t}\n}\nfunction CheckCode93(string) {\n\tvar checkOne = string[string.length-3].join(\"\");\n\tvar checkTwo = string[string.length-2].join(\"\");\n\tvar failSafe = true;\n\tif(typeof Code93Encoding[checkOne] == 'undefined') return false;\n\tif(typeof Code93Encoding[checkTwo]  == 'undefined') return false;\n\tvar checkSum = Code93Encoding[checkOne].value;\n\tvar weight = 1;\n\tvar sum = 0;\n\tfor(var i = string.length-4; i > 0; i--) {\n\t\tfailSafe = typeof Code93Encoding[string[i].join(\"\")] === 'undefined' ? false : failSafe;\n\t\tif(!failSafe)break;\n\t\tsum += Code93Encoding[string[i].join(\"\")].value*weight;\n\t\tweight++;\n\t\tif(weight > 20) weight = 1;\n\t}\n\tvar firstCheck = sum%47;\n\tvar firstBool = firstCheck === checkSum;\n\tif(!firstBool) return false;\n\tif(!failSafe) return false;\n\tsum = firstCheck;\n\tweight = 2;\n\tcheckSum = Code93Encoding[checkTwo].value;\n\tfor(var i = string.length-4; i > 0; i--) {\n\t\tfailSafe = typeof Code93Encoding[string[i].join(\"\")] === 'undefined' ? false : failSafe;\n\t\tif(!failSafe)break;\n\t\tsum += Code93Encoding[string[i].join(\"\")].value*weight;\n\t\tweight++;\n\t\tif(weight > 15) weight = 1;\n\t}\n\tvar secondCheck = sum%47;\n\tvar secondBool = secondCheck === checkSum;\n\treturn secondBool&&firstBool;\n}\n\nfunction CheckCode39(string) {\n\tvar trigger = true;\n\tif(typeof Code39Encoding[string[0].join(\"\")] == 'undefined') return false;\n\tif(Code39Encoding[string[0].join(\"\")].character != \"*\") return false;\n\tif(typeof Code39Encoding[string[string.length-1].join(\"\")] == 'undefined') return false;\n\tif(Code39Encoding[string[string.length-1].join(\"\")].character != \"*\") return false;\n\tfor(var i = 1; i < string.length-1; i++) {\n\t\tif(typeof Code39Encoding[string[i].join(\"\")] == 'undefined') {\n\t\t\ttrigger = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn trigger;\n}\n\nfunction DecodeCode39(string) {\n\tvar resultString = \"\";\n\tvar special = false;\n\tvar character = \"\";\n\tvar specialchar = \"\";\n\tfor(var i = 1; i < string.length-1;i++) {\n\t\tcharacter = Code39Encoding[string[i].join(\"\")].character;\n\t\tif(character == \"$\" || character == \"/\" || character == \"+\" || character == \"%\") {\n\t\t\tspecial = true;\n\t\t\tspecialchar = character;\n\t\t\tcontinue;\n\t\t}\n\t\tif(special) {\n\t\t\tif(typeof ExtendedEncoding[specialchar+character] == 'undefined') {\n\t\t\t\tif(ExtendedExceptions.indexOf(character) != -1) resultString += character;\n\t\t\t} else {\n\t\t\t\tresultString += ExtendedEncoding[specialchar+character];\n\t\t\t}\n\t\t\tspecial = false;\n\t\t\tcontinue;\n\t\t}\n\t\tresultString += character;\n\t}\n\treturn resultString;\n}\n\nfunction DecodeCode93(string) {\n\tvar resultString=\"\";\n\tvar special = false;\n\tvar character = \"\";\n\tvar specialchar = \"\";\n\tfor(var i = 1; i < string.length-3; i++) {\n\t\tcharacter = Code93Encoding[string[i].join(\"\")].character;\n\t\tif(character == \"($)\" || character == \"(/)\" || character == \"(+)\" ||character == \"(%)\") {\n\t\t\tspecial = true;\n\t\t\tspecialchar = character[1];\n\t\t\tcontinue;\n\t\t}\n\t\tif(special) {\n\t\t\tif(typeof ExtendedEncoding[specialchar+character] == 'undefined') {\n\t\t\t\tif(ExtendedExceptions.indexOf(character) != -1) resultString += character;\n\t\t\t} else {\n\t\t\t\tresultString += ExtendedEncoding[specialchar+character];\n\t\t\t}\n\t\t\tspecial = false;\n\t\t\tcontinue;\n\t\t}\n\t\tresultString += character;\n\t}\n\treturn resultString;\n}\n\nfunction DecodeCode128(string){\n\tvar set = Code128Encoding[string[0].join(\"\")]\n\tvar symbol;\n\tvar Code128Format = \"Code128\";\n\tvar resultString=\"\";\n\tfor(var i=1;i<(string.length-2);i++){\n\t\tsymbol=Code128Encoding[string[i].join(\"\")][set];\n\t\tswitch(symbol){\n\t\t\tcase \"FNC1\":\n\t\t\t\tif(i == 1) Code128Format = \"GS1-128\"\n\t\t\tcase \"FNC2\":\n\t\t\tcase \"FNC3\":\n\t\t\tcase \"FNC4\":\n\t\t\t\tbreak;\n\t\t\tcase \"SHIFT_B\":\n\t\t\t\ti++;\n\t\t\t\tresultString+=Code128Encoding[string[i].join(\"\")][\"B\"]\n\t\t\t\tbreak;\n\t\t\tcase \"SHIFT_A\":\n\t\t\t\ti++;\n\t\t\t\tresultString+=Code128Encoding[string[i].join(\"\")][\"A\"]\n\t\t\t\tbreak;\n\t\t\tcase \"Code_A\":\n\t\t\t\tset=\"A\";\n\t\t\t\tbreak;\n\t\t\tcase \"Code_B\":\n\t\t\t\tset=\"B\";\n\t\t\t\tbreak;\n\t\t\tcase \"Code_C\":\n\t\t\t\tset=\"C\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresultString+=symbol;\n\t\t}\n\t}\n\treturn {string: resultString, format: Code128Format};\n}\nTwoOfFiveEncoding = [\"00110\",\"10001\",\"01001\",\"11000\",\"00101\",\"10100\",\"01100\",\"00011\",\"10010\",\"01010\"];\nCode128Encoding = {\n\t\"212222\":{A : \" \", B : \" \", C : \"00\"},\n\t\"222122\":{A : \"!\", B : \"!\", C : \"01\"},\n\t\"222221\":{A : '\"', B : '\"', C : \"02\"},\n\t\"121223\":{A : \"#\", B : \"#\", C : \"03\"},\n\t\"121322\":{A : \"$\", B : \"$\", C : \"04\"},\n\t\"131222\":{A : \"%\", B : \"%\", C : \"05\"},\n\t\"122213\":{A : \"&\", B : \"&\", C : \"06\"},\n\t\"122312\":{A : \"'\", B : \"'\", C : \"07\"},\n\t\"132212\":{A : \"(\", B : \"(\", C : \"08\"},\n\t\"221213\":{A : \")\", B : \")\", C : \"09\"},\n\t\"221312\":{A : \"*\", B : \"*\", C : \"10\"},\n\t\"231212\":{A : \"+\", B : \"+\", C : \"11\"},\n\t\"112232\":{A : \",\", B : \",\", C : \"12\"},\n\t\"122132\":{A : \"-\", B : \"-\", C : \"13\"},\n\t\"122231\":{A : \".\", B : \".\", C : \"14\"},\n\t\"113222\":{A : \"/\", B : \"/\", C : \"15\"},\n\t\"123122\":{A : \"0\", B : \"0\", C : \"16\"},\n\t\"123221\":{A : \"1\", B : \"1\", C : \"17\"},\n\t\"223211\":{A : \"2\", B : \"2\", C : \"18\"},\n\t\"221132\":{A : \"3\", B : \"3\", C : \"19\"},\n\t\"221231\":{A : \"4\", B : \"4\", C : \"20\"},\n\t\"213212\":{A : \"5\", B : \"5\", C : \"21\"},\n\t\"223112\":{A : \"6\", B : \"6\", C : \"22\"},\n\t\"312131\":{A : \"7\", B : \"7\", C : \"23\"},\n\t\"311222\":{A : \"8\", B : \"8\", C : \"24\"},\n\t\"321122\":{A : \"9\", B : \"9\", C : \"25\"},\n\t\"321221\":{A : \":\", B : \":\", C : \"26\"},\n\t\"312212\":{A : \";\", B : \";\", C : \"27\"},\n\t\"322112\":{A : \"<\", B : \"<\", C : \"28\"},\n\t\"322211\":{A : \"=\", B : \"=\", C : \"29\"},\n\t\"212123\":{A : \">\", B : \">\", C : \"30\"},\n\t\"212321\":{A : \"?\", B : \"?\", C : \"31\"},\n\t\"232121\":{A : \"@\", B : \"@\", C : \"32\"},\n\t\"111323\":{A : \"A\", B : \"A\", C : \"33\"},\n\t\"131123\":{A : \"B\", B : \"B\", C : \"34\"},\n\t\"131321\":{A : \"C\", B : \"C\", C : \"35\"},\n\t\"112313\":{A : \"D\", B : \"D\", C : \"36\"},\n\t\"132113\":{A : \"E\", B : \"E\", C : \"37\"},\n\t\"132311\":{A : \"F\", B : \"F\", C : \"38\"},\n\t\"211313\":{A : \"G\", B : \"G\", C : \"39\"},\n\t\"231113\":{A : \"H\", B : \"H\", C : \"40\"},\n\t\"231311\":{A : \"I\", B : \"I\", C : \"41\"},\n\t\"112133\":{A : \"J\", B : \"J\", C : \"42\"},\n\t\"112331\":{A : \"K\", B : \"K\", C : \"43\"},\n\t\"132131\":{A : \"L\", B : \"L\", C : \"44\"},\n\t\"113123\":{A : \"M\", B : \"M\", C : \"45\"},\n\t\"113321\":{A : \"N\", B : \"N\", C : \"46\"},\n\t\"133121\":{A : \"O\", B : \"O\", C : \"47\"},\n\t\"313121\":{A : \"P\", B : \"P\", C : \"48\"},\n\t\"211331\":{A : \"Q\", B : \"Q\", C : \"49\"},\n\t\"231131\":{A : \"R\", B : \"R\", C : \"50\"},\n\t\"213113\":{A : \"S\", B : \"S\", C : \"51\"},\n\t\"213311\":{A : \"T\", B : \"T\", C : \"52\"},\n\t\"213131\":{A : \"U\", B : \"U\", C : \"53\"},\n\t\"311123\":{A : \"V\", B : \"V\", C : \"54\"},\n\t\"311321\":{A : \"W\", B : \"W\", C : \"55\"},\n\t\"331121\":{A : \"X\", B : \"X\", C : \"56\"},\n\t\"312113\":{A : \"Y\", B : \"Y\", C : \"57\"},\n\t\"312311\":{A : \"Z\", B : \"Z\", C : \"58\"},\n\t\"332111\":{A : \"[\", B : \"[\", C : \"59\"},\n\t\"314111\":{A : \"\\\\\", B : \"\\\\\", C : \"60\"},\n\t\"221411\":{A : \"]\", B : \"]\", C : \"61\"},\n\t\"431111\":{A : \"^\", B : \"^\", C : \"62\"},\n\t\"111224\":{A : \"_\", B : \"_\", C : \"63\"},\n\t\"111422\":{A : \"NUL\", B : \"`\", C : \"64\"},\n\t\"121124\":{A : \"SOH\", B : \"a\", C : \"65\"},\n\t\"121421\":{A : \"STX\", B : \"b\", C : \"66\"},\n\t\"141122\":{A : \"ETX\", B : \"c\", C : \"67\"},\n\t\"141221\":{A : \"EOT\", B : \"d\", C : \"68\"},\n\t\"112214\":{A : \"ENQ\", B : \"e\", C : \"69\"},\n\t\"112412\":{A : \"ACK\", B : \"f\", C : \"70\"},\n\t\"122114\":{A : \"BEL\", B : \"g\", C : \"71\"},\n\t\"122411\":{A : \"BS\", B : \"h\", C : \"72\"},\n\t\"142112\":{A : \"HT\", B : \"i\", C : \"73\"},\n\t\"142211\":{A : \"LF\", B : \"j\", C : \"74\"},\n\t\"241211\":{A : \"VT\", B : \"k\", C : \"75\"},\n\t\"221114\":{A : \"FF\", B : \"l\", C : \"76\"},\n\t\"413111\":{A : \"CR\", B : \"m\", C : \"77\"},\n\t\"241112\":{A : \"SO\", B : \"n\", C : \"78\"},\n\t\"134111\":{A : \"SI\", B : \"o\", C : \"79\"},\n\t\"111242\":{A : \"DLE\", B : \"p\", C : \"80\"},\n\t\"121142\":{A : \"DC1\", B : \"q\", C : \"81\"},\n\t\"121241\":{A : \"DC2\", B : \"r\", C : \"82\"},\n\t\"114212\":{A : \"DC3\", B : \"s\", C : \"83\"},\n\t\"124112\":{A : \"DC4\", B : \"t\", C : \"84\"},\n\t\"124211\":{A : \"NAK\", B : \"u\", C : \"85\"},\n\t\"411212\":{A : \"SYN\", B : \"v\", C : \"86\"},\n\t\"421112\":{A : \"ETB\", B : \"w\", C : \"87\"},\n\t\"421211\":{A : \"CAN\", B : \"x\", C : \"88\"},\n\t\"212141\":{A : \"EM\", B : \"y\", C : \"89\"},\n\t\"214121\":{A : \"SUB\", B : \"z\", C : \"90\"},\n\t\"412121\":{A : \"ESC\", B : \"{\", C : \"91\"},\n\t\"111143\":{A : \"FS\", B : \"|\", C : \"92\"},\n\t\"111341\":{A : \"GS\", B : \"}\", C : \"93\"},\n\t\"131141\":{A : \"RS\", B : \"~\", C : \"94\"},\n\t\"114113\":{A : \"US\", B : \"DEL\", C : \"95\"},\n\t\"114311\":{A : \"FNC3\", B : \"FNC3\", C : \"96\"},\n\t\"411113\":{A : \"FNC2\", B : \"FNC2\", C : \"97\"},\n\t\"411311\":{A : \"SHIFT_B\", B : \"SHIFT_A\", C : \"98\"},\n\t\"113141\":{A : \"Code_C\", B : \"Code_C\", C : \"99\"},\n\t\"114131\":{A : \"Code_B\", B : \"FNC4\", C : \"Code_B\"},\n\t\"311141\":{A : \"FNC4\", B : \"Code_A\", C : \"Code_A\"},\n\t\"411131\":{A : \"FNC1\", B : \"FNC1\", C : \"FNC1\"},\n\t\"211412\": \"A\",\n\t\"211214\": \"B\",\n\t\"211232\": \"C\",\n\t\"233111\":{A : \"STOP\", B : \"STOP\", C : \"STOP\"},\n\tvalue: [\n\t\t\"212222\",\n\t\t\"222122\",\n\t\t\"222221\",\n\t\t\"121223\",\n\t\t\"121322\",\n\t\t\"131222\",\n\t\t\"122213\",\n\t\t\"122312\",\n\t\t\"132212\",\n\t\t\"221213\",\n\t\t\"221312\",\n\t\t\"231212\",\n\t\t\"112232\",\n\t\t\"122132\",\n\t\t\"122231\",\n\t\t\"113222\",\n\t\t\"123122\",\n\t\t\"123221\",\n\t\t\"223211\",\n\t\t\"221132\",\n\t\t\"221231\",\n\t\t\"213212\",\n\t\t\"223112\",\n\t\t\"312131\",\n\t\t\"311222\",\n\t\t\"321122\",\n\t\t\"321221\",\n\t\t\"312212\",\n\t\t\"322112\",\n\t\t\"322211\",\n\t\t\"212123\",\n\t\t\"212321\",\n\t\t\"232121\",\n\t\t\"111323\",\n\t\t\"131123\",\n\t\t\"131321\",\n\t\t\"112313\",\n\t\t\"132113\",\n\t\t\"132311\",\n\t\t\"211313\",\n\t\t\"231113\",\n\t\t\"231311\",\n\t\t\"112133\",\n\t\t\"112331\",\n\t\t\"132131\",\n\t\t\"113123\",\n\t\t\"113321\",\n\t\t\"133121\",\n\t\t\"313121\",\n\t\t\"211331\",\n\t\t\"231131\",\n\t\t\"213113\",\n\t\t\"213311\",\n\t\t\"213131\",\n\t\t\"311123\",\n\t\t\"311321\",\n\t\t\"331121\",\n\t\t\"312113\",\n\t\t\"312311\",\n\t\t\"332111\",\n\t\t\"314111\",\n\t\t\"221411\",\n\t\t\"431111\",\n\t\t\"111224\",\n\t\t\"111422\",\n\t\t\"121124\",\n\t\t\"121421\",\n\t\t\"141122\",\n\t\t\"141221\",\n\t\t\"112214\",\n\t\t\"112412\",\n\t\t\"122114\",\n\t\t\"122411\",\n\t\t\"142112\",\n\t\t\"142211\",\n\t\t\"241211\",\n\t\t\"221114\",\n\t\t\"413111\",\n\t\t\"241112\",\n\t\t\"134111\",\n\t\t\"111242\",\n\t\t\"121142\",\n\t\t\"121241\",\n\t\t\"114212\",\n\t\t\"124112\",\n\t\t\"124211\",\n\t\t\"411212\",\n\t\t\"421112\",\n\t\t\"421211\",\n\t\t\"212141\",\n\t\t\"214121\",\n\t\t\"412121\",\n\t\t\"111143\",\n\t\t\"111341\",\n\t\t\"131141\",\n\t\t\"114113\",\n\t\t\"114311\",\n\t\t\"411113\",\n\t\t\"411311\",\n\t\t\"113141\",\n\t\t\"114131\",\n\t\t\"311141\",\n\t\t\"411131\",\n\t\t\"211412\",\n\t\t\"211214\",\n\t\t\"211232\",\n\t\t\"233111\"]\n}\n\nCode93Encoding = {\n\"131112\":{value:0,character:\"0\"},\n\"111213\":{value:1,character:\"1\"},\n\"111312\":{value:2,character:\"2\"},\n\"111411\":{value:3,character:\"3\"},\n\"121113\":{value:4,character:\"4\"},\n\"121212\":{value:5,character:\"5\"},\n\"121311\":{value:6,character:\"6\"},\n\"111114\":{value:7,character:\"7\"},\n\"131211\":{value:8,character:\"8\"},\n\"141111\":{value:9,character:\"9\"},\n\"211113\":{value:10,character:\"A\"},\n\"211212\":{value:11,character:\"B\"},\n\"211311\":{value:12,character:\"C\"},\n\"221112\":{value:13,character:\"D\"},\n\"221211\":{value:14,character:\"E\"},\n\"231111\":{value:15,character:\"F\"},\n\"112113\":{value:16,character:\"G\"},\n\"112212\":{value:17,character:\"H\"},\n\"112311\":{value:18,character:\"I\"},\n\"122112\":{value:19,character:\"J\"},\n\"132111\":{value:20,character:\"K\"},\n\"111123\":{value:21,character:\"L\"},\n\"111222\":{value:22,character:\"M\"},\n\"111321\":{value:23,character:\"N\"},\n\"121122\":{value:24,character:\"O\"},\n\"131121\":{value:25,character:\"P\"},\n\"212112\":{value:26,character:\"Q\"},\n\"212211\":{value:27,character:\"R\"},\n\"211122\":{value:28,character:\"S\"},\n\"211221\":{value:29,character:\"T\"},\n\"221121\":{value:30,character:\"U\"},\n\"222111\":{value:31,character:\"V\"},\n\"112122\":{value:32,character:\"W\"},\n\"112221\":{value:33,character:\"X\"},\n\"122121\":{value:34,character:\"Y\"},\n\"123111\":{value:35,character:\"Z\"},\n\"121131\":{value:36,character:\"-\"},\n\"311112\":{value:37,character:\".\"},\n\"311211\":{value:38,character:\" \"},\n\"321111\":{value:39,character:\"$\"},\n\"112131\":{value:40,character:\"/\"},\n\"113121\":{value:41,character:\"+\"},\n\"211131\":{value:42,character:\"%\"},\n\"121221\":{value:43,character:\"($)\"},\n\"312111\":{value:44,character:\"(%)\"},\n\"311121\":{value:45,character:\"(/)\"},\n\"122211\":{value:46,character:\"(+)\"},\n\"111141\":{value:-1,character:\"*\"}\n};\nCode39Encoding = {\n\"111221211\":{value:0,character:\"0\"},\n\"211211112\":{value:1,character:\"1\"},\n\"112211112\":{value:2,character:\"2\"},\n\"212211111\":{value:3,character:\"3\"},\n\"111221112\":{value:4,character:\"4\"},\n\"211221111\":{value:5,character:\"5\"},\n\"112221111\":{value:6,character:\"6\"},\n\"111211212\":{value:7,character:\"7\"},\n\"211211211\":{value:8,character:\"8\"},\n\"112211211\":{value:9,character:\"9\"},\n\"211112112\":{value:10,character:\"A\"},\n\"112112112\":{value:11,character:\"B\"},\n\"212112111\":{value:12,character:\"C\"},\n\"111122112\":{value:13,character:\"D\"},\n\"211122111\":{value:14,character:\"E\"},\n\"112122111\":{value:15,character:\"F\"},\n\"111112212\":{value:16,character:\"G\"},\n\"211112211\":{value:17,character:\"H\"},\n\"112112211\":{value:18,character:\"I\"},\n\"111122211\":{value:19,character:\"J\"},\n\"211111122\":{value:20,character:\"K\"},\n\"112111122\":{value:21,character:\"L\"},\n\"212111121\":{value:22,character:\"M\"},\n\"111121122\":{value:23,character:\"N\"},\n\"211121121\":{value:24,character:\"O\"},\n\"112121121\":{value:25,character:\"P\"},\n\"111111222\":{value:26,character:\"Q\"},\n\"211111221\":{value:27,character:\"R\"},\n\"112111221\":{value:28,character:\"S\"},\n\"111121221\":{value:29,character:\"T\"},\n\"221111112\":{value:30,character:\"U\"},\n\"122111112\":{value:31,character:\"V\"},\n\"222111111\":{value:32,character:\"W\"},\n\"121121112\":{value:33,character:\"X\"},\n\"221121111\":{value:34,character:\"Y\"},\n\"122121111\":{value:35,character:\"Z\"},\n\"121111212\":{value:36,character:\"-\"},\n\"221111211\":{value:37,character:\".\"},\n\"122111211\":{value:38,character:\" \"},\n\"121212111\":{value:39,character:\"$\"},\n\"121211121\":{value:40,character:\"/\"},\n\"121112121\":{value:41,character:\"+\"},\n\"111212121\":{value:42,character:\"%\"},\n\"121121211\":{value:-1,character:\"*\"}\n};\n\nExtendedEncoding = {\n\"/A\": '!',\n\"/B\": '\"',\n\"/C\": '#',\n\"/D\": '$',\n\"/E\": '%',\n\"/F\": '&',\n\"/G\": \"'\",\n\"/H\": '(',\n\"/I\": ')',\n\"/J\": '*',\n\"/K\": '+',\n\"/L\": ',',\n\"/O\": '/',\n\"/Z\": ':',\n\"%F\": ';',\n\"%G\": '<',\n\"%H\": '=',\n\"%I\": '>',\n\"%J\": '?',\n\"%K\": '[',\n\"%L\": \"\\\\\",\n\"%M\": ']',\n\"%N\": '^',\n\"%O\": '_',\n\"+A\": 'a',\n\"+B\": 'b',\n\"+C\": 'c',\n\"+D\": 'd',\n\"+E\": 'e',\n\"+F\": 'f',\n\"+G\": 'g',\n\"+H\": 'h',\n\"+I\": 'i',\n\"+J\": 'j',\n\"+K\": 'k',\n\"+L\": 'l',\n\"+M\": 'm',\n\"+N\": 'n',\n\"+O\": 'o',\n\"+P\": 'p',\n\"+Q\": 'q',\n\"+R\": 'r',\n\"+S\": 's',\n\"+T\": 't',\n\"+U\": 'u',\n\"+V\": 'v',\n\"+W\": 'w',\n\"+X\": 'x',\n\"+Y\": 'y',\n\"+Z\": 'z',\n\"%P\": \"{\",\n\"%Q\": '|',\n\"%R\": '|',\n\"%S\": '~'\n}\n\nExtendedExceptions = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"-\",\".\"];\n\nEAN13Encoding = {\n\"L\": {\n\"0001101\": 0,\n\"0011001\": 1,\n\"0010011\": 2,\n\"0111101\": 3,\n\"0100011\": 4,\n\"0110001\": 5,\n\"0101111\": 6,\n\"0111011\": 7,\n\"0110111\": 8,\n\"0001011\": 9\n},\n\"G\": {\n\"0100111\": 0,\n\"0110011\": 1,\n\"0011011\": 2,\n\"0100001\": 3,\n\"0011101\": 4,\n\"0111001\": 5,\n\"0000101\": 6,\n\"0010001\": 7,\n\"0001001\": 8,\n\"0010111\": 9\n},\n\"R\": {\n\"1110010\": 0,\n\"1100110\": 1,\n\"1101100\": 2,\n\"1000010\": 3,\n\"1011100\": 4,\n\"1001110\": 5,\n\"1010000\": 6,\n\"1000100\": 7,\n\"1001000\": 8,\n\"1110100\": 9\n},\nformats: {\n\"LLLLLL\": 0,\n\"LLGLGG\": 1,\n\"LLGGLG\": 2,\n\"LLGGGL\": 3,\n\"LGLLGG\": 4,\n\"LGGLLG\": 5,\n\"LGGGLL\": 6,\n\"LGLGLG\": 7,\n\"LGLGGL\": 8,\n\"LGGLGL\": 9\n}\n}\n\nself.onmessage = function(e) {\n\tImage = {\n\t\tdata: new Uint8ClampedArray(e.data.ImageData),\n\t\twidth: e.data.Width,\n\t\theight: e.data.Height\n\t}\n\tFormatPriority = [\"Code128\",\"Code93\",\"Code39\",\"EAN-13\", \"2Of5\", \"Inter2Of5\"];\n\tSecure2Of5 = true;\n\tEan13Speed = true;\n\tLowLight = false;\n\tif(typeof e.data.LowLight != 'undefined') LowLight = e.data.LowLight;\n\tif(typeof e.data.Ean13Speed != 'undefined') Ean13Speed = e.data.Ean13Speed;\n\tif(typeof e.data.Secure2Of5 != 'undefined') Secure2Of5 = e.data.Secure2Of5;\n\tDecodeNr = Number.POSITIVE_INFINITY;\n\tif(typeof e.data.DecodeNr != 'undefined') {\n\t\tDecodeNr = e.data.DecodeNr;\n\t}\n\tif(typeof e.data.Decode != 'undefined') {\n\t\tFormatPriority = e.data.Decode;\n\t}\n\tCreateTable();\n\tswitch(e.data.cmd) {\n\t\tcase \"flip\":\n\t\t\tflipTable();\n\t\t\tbreak;\n\t\tcase \"right\":\n\t\t\trotateTableRight();\n\t\t\tbreak;\n\t\tcase \"left\":\n\t\t\trotateTableLeft();\n\t\t\tbreak;\n\t\tcase \"normal\":\n\t\t\tbreak;\t\n\t}\n\tMain();\n\tpostMessage({result: [], success: false, finished: true});\n}\n","GridSampler={};\nGridSampler.checkAndNudgePoints=function(image,points){var width=qrcode.width;var height=qrcode.height;var nudged=true;for(var offset=0;offset<points.length&&nudged;offset+=2){var x=Math.floor(points[offset]);var y=Math.floor(points[offset+1]);if(x<-1||x>width||y<-1||y>height)throw\"Error.checkAndNudgePoints \";nudged=false;if(x==-1){points[offset]=0;nudged=true}else if(x==width){points[offset]=width-1;nudged=true}if(y==-1){points[offset+1]=0;nudged=true}else if(y==height){points[offset+1]=height-1;\nnudged=true}}nudged=true;for(var offset=points.length-2;offset>=0&&nudged;offset-=2){var x=Math.floor(points[offset]);var y=Math.floor(points[offset+1]);if(x<-1||x>width||y<-1||y>height)throw\"Error.checkAndNudgePoints \";nudged=false;if(x==-1){points[offset]=0;nudged=true}else if(x==width){points[offset]=width-1;nudged=true}if(y==-1){points[offset+1]=0;nudged=true}else if(y==height){points[offset+1]=height-1;nudged=true}}};\nGridSampler.sampleGrid3=function(image,dimension,transform){var bits=new BitMatrix(dimension);var points=new Array(dimension<<1);for(var y=0;y<dimension;y++){var max=points.length;var iValue=y+.5;for(var x=0;x<max;x+=2){points[x]=(x>>1)+.5;points[x+1]=iValue}transform.transformPoints1(points);GridSampler.checkAndNudgePoints(image,points);try{for(var x=0;x<max;x+=2){var xpoint=Math.floor(points[x])*4+Math.floor(points[x+1])*qrcode.width*4;var bit=image[Math.floor(points[x])+qrcode.width*Math.floor(points[x+\n1])];qrcode.imagedata.data[xpoint]=bit?255:0;qrcode.imagedata.data[xpoint+1]=bit?255:0;qrcode.imagedata.data[xpoint+2]=0;qrcode.imagedata.data[xpoint+3]=255;if(bit)bits.set_Renamed(x>>1,y)}}catch(aioobe){throw\"Error.checkAndNudgePoints\";}}return bits};\nGridSampler.sampleGridx=function(image,dimension,p1ToX,p1ToY,p2ToX,p2ToY,p3ToX,p3ToY,p4ToX,p4ToY,p1FromX,p1FromY,p2FromX,p2FromY,p3FromX,p3FromY,p4FromX,p4FromY){var transform=PerspectiveTransform.quadrilateralToQuadrilateral(p1ToX,p1ToY,p2ToX,p2ToY,p3ToX,p3ToY,p4ToX,p4ToY,p1FromX,p1FromY,p2FromX,p2FromY,p3FromX,p3FromY,p4FromX,p4FromY);return GridSampler.sampleGrid3(image,dimension,transform)};\nfunction ECB(count,dataCodewords){this.count=count;this.dataCodewords=dataCodewords;this.__defineGetter__(\"Count\",function(){return this.count});this.__defineGetter__(\"DataCodewords\",function(){return this.dataCodewords})}\nfunction ECBlocks(ecCodewordsPerBlock,ecBlocks1,ecBlocks2){this.ecCodewordsPerBlock=ecCodewordsPerBlock;if(ecBlocks2)this.ecBlocks=new Array(ecBlocks1,ecBlocks2);else this.ecBlocks=new Array(ecBlocks1);this.__defineGetter__(\"ECCodewordsPerBlock\",function(){return this.ecCodewordsPerBlock});this.__defineGetter__(\"TotalECCodewords\",function(){return this.ecCodewordsPerBlock*this.NumBlocks});this.__defineGetter__(\"NumBlocks\",function(){var total=0;for(var i=0;i<this.ecBlocks.length;i++)total+=this.ecBlocks[i].length;\nreturn total});this.getECBlocks=function(){return this.ecBlocks}}\nfunction Version(versionNumber,alignmentPatternCenters,ecBlocks1,ecBlocks2,ecBlocks3,ecBlocks4){this.versionNumber=versionNumber;this.alignmentPatternCenters=alignmentPatternCenters;this.ecBlocks=new Array(ecBlocks1,ecBlocks2,ecBlocks3,ecBlocks4);var total=0;var ecCodewords=ecBlocks1.ECCodewordsPerBlock;var ecbArray=ecBlocks1.getECBlocks();for(var i=0;i<ecbArray.length;i++){var ecBlock=ecbArray[i];total+=ecBlock.Count*(ecBlock.DataCodewords+ecCodewords)}this.totalCodewords=total;this.__defineGetter__(\"VersionNumber\",\nfunction(){return this.versionNumber});this.__defineGetter__(\"AlignmentPatternCenters\",function(){return this.alignmentPatternCenters});this.__defineGetter__(\"TotalCodewords\",function(){return this.totalCodewords});this.__defineGetter__(\"DimensionForVersion\",function(){return 17+4*this.versionNumber});this.buildFunctionPattern=function(){var dimension=this.DimensionForVersion;var bitMatrix=new BitMatrix(dimension);bitMatrix.setRegion(0,0,9,9);bitMatrix.setRegion(dimension-8,0,8,9);bitMatrix.setRegion(0,\ndimension-8,9,8);var max=this.alignmentPatternCenters.length;for(var x=0;x<max;x++){var i=this.alignmentPatternCenters[x]-2;for(var y=0;y<max;y++){if(x==0&&(y==0||y==max-1)||x==max-1&&y==0)continue;bitMatrix.setRegion(this.alignmentPatternCenters[y]-2,i,5,5)}}bitMatrix.setRegion(6,9,1,dimension-17);bitMatrix.setRegion(9,6,dimension-17,1);if(this.versionNumber>6){bitMatrix.setRegion(dimension-11,0,3,6);bitMatrix.setRegion(0,dimension-11,6,3)}return bitMatrix};this.getECBlocksForLevel=function(ecLevel){return this.ecBlocks[ecLevel.ordinal()]}}\nVersion.VERSION_DECODE_INFO=new Array(31892,34236,39577,42195,48118,51042,55367,58893,63784,68472,70749,76311,79154,84390,87683,92361,96236,102084,102881,110507,110734,117786,119615,126325,127568,133589,136944,141498,145311,150283,152622,158308,161089,167017);Version.VERSIONS=buildVersions();Version.getVersionForNumber=function(versionNumber){if(versionNumber<1||versionNumber>40)throw\"ArgumentException\";return Version.VERSIONS[versionNumber-1]};\nVersion.getProvisionalVersionForDimension=function(dimension){if(dimension%4!=1)throw\"Error getProvisionalVersionForDimension\";try{return Version.getVersionForNumber(dimension-17>>2)}catch(iae){throw\"Error getVersionForNumber\";}};\nVersion.decodeVersionInformation=function(versionBits){var bestDifference=4294967295;var bestVersion=0;for(var i=0;i<Version.VERSION_DECODE_INFO.length;i++){var targetVersion=Version.VERSION_DECODE_INFO[i];if(targetVersion==versionBits)return this.getVersionForNumber(i+7);var bitsDifference=FormatInformation.numBitsDiffering(versionBits,targetVersion);if(bitsDifference<bestDifference){bestVersion=i+7;bestDifference=bitsDifference}}if(bestDifference<=3)return this.getVersionForNumber(bestVersion);\nreturn null};\nfunction buildVersions(){return new Array(new Version(1,new Array,new ECBlocks(7,new ECB(1,19)),new ECBlocks(10,new ECB(1,16)),new ECBlocks(13,new ECB(1,13)),new ECBlocks(17,new ECB(1,9))),new Version(2,new Array(6,18),new ECBlocks(10,new ECB(1,34)),new ECBlocks(16,new ECB(1,28)),new ECBlocks(22,new ECB(1,22)),new ECBlocks(28,new ECB(1,16))),new Version(3,new Array(6,22),new ECBlocks(15,new ECB(1,55)),new ECBlocks(26,new ECB(1,44)),new ECBlocks(18,new ECB(2,17)),new ECBlocks(22,new ECB(2,13))),new Version(4,\nnew Array(6,26),new ECBlocks(20,new ECB(1,80)),new ECBlocks(18,new ECB(2,32)),new ECBlocks(26,new ECB(2,24)),new ECBlocks(16,new ECB(4,9))),new Version(5,new Array(6,30),new ECBlocks(26,new ECB(1,108)),new ECBlocks(24,new ECB(2,43)),new ECBlocks(18,new ECB(2,15),new ECB(2,16)),new ECBlocks(22,new ECB(2,11),new ECB(2,12))),new Version(6,new Array(6,34),new ECBlocks(18,new ECB(2,68)),new ECBlocks(16,new ECB(4,27)),new ECBlocks(24,new ECB(4,19)),new ECBlocks(28,new ECB(4,15))),new Version(7,new Array(6,\n22,38),new ECBlocks(20,new ECB(2,78)),new ECBlocks(18,new ECB(4,31)),new ECBlocks(18,new ECB(2,14),new ECB(4,15)),new ECBlocks(26,new ECB(4,13),new ECB(1,14))),new Version(8,new Array(6,24,42),new ECBlocks(24,new ECB(2,97)),new ECBlocks(22,new ECB(2,38),new ECB(2,39)),new ECBlocks(22,new ECB(4,18),new ECB(2,19)),new ECBlocks(26,new ECB(4,14),new ECB(2,15))),new Version(9,new Array(6,26,46),new ECBlocks(30,new ECB(2,116)),new ECBlocks(22,new ECB(3,36),new ECB(2,37)),new ECBlocks(20,new ECB(4,16),new ECB(4,\n17)),new ECBlocks(24,new ECB(4,12),new ECB(4,13))),new Version(10,new Array(6,28,50),new ECBlocks(18,new ECB(2,68),new ECB(2,69)),new ECBlocks(26,new ECB(4,43),new ECB(1,44)),new ECBlocks(24,new ECB(6,19),new ECB(2,20)),new ECBlocks(28,new ECB(6,15),new ECB(2,16))),new Version(11,new Array(6,30,54),new ECBlocks(20,new ECB(4,81)),new ECBlocks(30,new ECB(1,50),new ECB(4,51)),new ECBlocks(28,new ECB(4,22),new ECB(4,23)),new ECBlocks(24,new ECB(3,12),new ECB(8,13))),new Version(12,new Array(6,32,58),\nnew ECBlocks(24,new ECB(2,92),new ECB(2,93)),new ECBlocks(22,new ECB(6,36),new ECB(2,37)),new ECBlocks(26,new ECB(4,20),new ECB(6,21)),new ECBlocks(28,new ECB(7,14),new ECB(4,15))),new Version(13,new Array(6,34,62),new ECBlocks(26,new ECB(4,107)),new ECBlocks(22,new ECB(8,37),new ECB(1,38)),new ECBlocks(24,new ECB(8,20),new ECB(4,21)),new ECBlocks(22,new ECB(12,11),new ECB(4,12))),new Version(14,new Array(6,26,46,66),new ECBlocks(30,new ECB(3,115),new ECB(1,116)),new ECBlocks(24,new ECB(4,40),new ECB(5,\n41)),new ECBlocks(20,new ECB(11,16),new ECB(5,17)),new ECBlocks(24,new ECB(11,12),new ECB(5,13))),new Version(15,new Array(6,26,48,70),new ECBlocks(22,new ECB(5,87),new ECB(1,88)),new ECBlocks(24,new ECB(5,41),new ECB(5,42)),new ECBlocks(30,new ECB(5,24),new ECB(7,25)),new ECBlocks(24,new ECB(11,12),new ECB(7,13))),new Version(16,new Array(6,26,50,74),new ECBlocks(24,new ECB(5,98),new ECB(1,99)),new ECBlocks(28,new ECB(7,45),new ECB(3,46)),new ECBlocks(24,new ECB(15,19),new ECB(2,20)),new ECBlocks(30,\nnew ECB(3,15),new ECB(13,16))),new Version(17,new Array(6,30,54,78),new ECBlocks(28,new ECB(1,107),new ECB(5,108)),new ECBlocks(28,new ECB(10,46),new ECB(1,47)),new ECBlocks(28,new ECB(1,22),new ECB(15,23)),new ECBlocks(28,new ECB(2,14),new ECB(17,15))),new Version(18,new Array(6,30,56,82),new ECBlocks(30,new ECB(5,120),new ECB(1,121)),new ECBlocks(26,new ECB(9,43),new ECB(4,44)),new ECBlocks(28,new ECB(17,22),new ECB(1,23)),new ECBlocks(28,new ECB(2,14),new ECB(19,15))),new Version(19,new Array(6,\n30,58,86),new ECBlocks(28,new ECB(3,113),new ECB(4,114)),new ECBlocks(26,new ECB(3,44),new ECB(11,45)),new ECBlocks(26,new ECB(17,21),new ECB(4,22)),new ECBlocks(26,new ECB(9,13),new ECB(16,14))),new Version(20,new Array(6,34,62,90),new ECBlocks(28,new ECB(3,107),new ECB(5,108)),new ECBlocks(26,new ECB(3,41),new ECB(13,42)),new ECBlocks(30,new ECB(15,24),new ECB(5,25)),new ECBlocks(28,new ECB(15,15),new ECB(10,16))),new Version(21,new Array(6,28,50,72,94),new ECBlocks(28,new ECB(4,116),new ECB(4,\n117)),new ECBlocks(26,new ECB(17,42)),new ECBlocks(28,new ECB(17,22),new ECB(6,23)),new ECBlocks(30,new ECB(19,16),new ECB(6,17))),new Version(22,new Array(6,26,50,74,98),new ECBlocks(28,new ECB(2,111),new ECB(7,112)),new ECBlocks(28,new ECB(17,46)),new ECBlocks(30,new ECB(7,24),new ECB(16,25)),new ECBlocks(24,new ECB(34,13))),new Version(23,new Array(6,30,54,74,102),new ECBlocks(30,new ECB(4,121),new ECB(5,122)),new ECBlocks(28,new ECB(4,47),new ECB(14,48)),new ECBlocks(30,new ECB(11,24),new ECB(14,\n25)),new ECBlocks(30,new ECB(16,15),new ECB(14,16))),new Version(24,new Array(6,28,54,80,106),new ECBlocks(30,new ECB(6,117),new ECB(4,118)),new ECBlocks(28,new ECB(6,45),new ECB(14,46)),new ECBlocks(30,new ECB(11,24),new ECB(16,25)),new ECBlocks(30,new ECB(30,16),new ECB(2,17))),new Version(25,new Array(6,32,58,84,110),new ECBlocks(26,new ECB(8,106),new ECB(4,107)),new ECBlocks(28,new ECB(8,47),new ECB(13,48)),new ECBlocks(30,new ECB(7,24),new ECB(22,25)),new ECBlocks(30,new ECB(22,15),new ECB(13,\n16))),new Version(26,new Array(6,30,58,86,114),new ECBlocks(28,new ECB(10,114),new ECB(2,115)),new ECBlocks(28,new ECB(19,46),new ECB(4,47)),new ECBlocks(28,new ECB(28,22),new ECB(6,23)),new ECBlocks(30,new ECB(33,16),new ECB(4,17))),new Version(27,new Array(6,34,62,90,118),new ECBlocks(30,new ECB(8,122),new ECB(4,123)),new ECBlocks(28,new ECB(22,45),new ECB(3,46)),new ECBlocks(30,new ECB(8,23),new ECB(26,24)),new ECBlocks(30,new ECB(12,15),new ECB(28,16))),new Version(28,new Array(6,26,50,74,98,\n122),new ECBlocks(30,new ECB(3,117),new ECB(10,118)),new ECBlocks(28,new ECB(3,45),new ECB(23,46)),new ECBlocks(30,new ECB(4,24),new ECB(31,25)),new ECBlocks(30,new ECB(11,15),new ECB(31,16))),new Version(29,new Array(6,30,54,78,102,126),new ECBlocks(30,new ECB(7,116),new ECB(7,117)),new ECBlocks(28,new ECB(21,45),new ECB(7,46)),new ECBlocks(30,new ECB(1,23),new ECB(37,24)),new ECBlocks(30,new ECB(19,15),new ECB(26,16))),new Version(30,new Array(6,26,52,78,104,130),new ECBlocks(30,new ECB(5,115),\nnew ECB(10,116)),new ECBlocks(28,new ECB(19,47),new ECB(10,48)),new ECBlocks(30,new ECB(15,24),new ECB(25,25)),new ECBlocks(30,new ECB(23,15),new ECB(25,16))),new Version(31,new Array(6,30,56,82,108,134),new ECBlocks(30,new ECB(13,115),new ECB(3,116)),new ECBlocks(28,new ECB(2,46),new ECB(29,47)),new ECBlocks(30,new ECB(42,24),new ECB(1,25)),new ECBlocks(30,new ECB(23,15),new ECB(28,16))),new Version(32,new Array(6,34,60,86,112,138),new ECBlocks(30,new ECB(17,115)),new ECBlocks(28,new ECB(10,46),\nnew ECB(23,47)),new ECBlocks(30,new ECB(10,24),new ECB(35,25)),new ECBlocks(30,new ECB(19,15),new ECB(35,16))),new Version(33,new Array(6,30,58,86,114,142),new ECBlocks(30,new ECB(17,115),new ECB(1,116)),new ECBlocks(28,new ECB(14,46),new ECB(21,47)),new ECBlocks(30,new ECB(29,24),new ECB(19,25)),new ECBlocks(30,new ECB(11,15),new ECB(46,16))),new Version(34,new Array(6,34,62,90,118,146),new ECBlocks(30,new ECB(13,115),new ECB(6,116)),new ECBlocks(28,new ECB(14,46),new ECB(23,47)),new ECBlocks(30,\nnew ECB(44,24),new ECB(7,25)),new ECBlocks(30,new ECB(59,16),new ECB(1,17))),new Version(35,new Array(6,30,54,78,102,126,150),new ECBlocks(30,new ECB(12,121),new ECB(7,122)),new ECBlocks(28,new ECB(12,47),new ECB(26,48)),new ECBlocks(30,new ECB(39,24),new ECB(14,25)),new ECBlocks(30,new ECB(22,15),new ECB(41,16))),new Version(36,new Array(6,24,50,76,102,128,154),new ECBlocks(30,new ECB(6,121),new ECB(14,122)),new ECBlocks(28,new ECB(6,47),new ECB(34,48)),new ECBlocks(30,new ECB(46,24),new ECB(10,\n25)),new ECBlocks(30,new ECB(2,15),new ECB(64,16))),new Version(37,new Array(6,28,54,80,106,132,158),new ECBlocks(30,new ECB(17,122),new ECB(4,123)),new ECBlocks(28,new ECB(29,46),new ECB(14,47)),new ECBlocks(30,new ECB(49,24),new ECB(10,25)),new ECBlocks(30,new ECB(24,15),new ECB(46,16))),new Version(38,new Array(6,32,58,84,110,136,162),new ECBlocks(30,new ECB(4,122),new ECB(18,123)),new ECBlocks(28,new ECB(13,46),new ECB(32,47)),new ECBlocks(30,new ECB(48,24),new ECB(14,25)),new ECBlocks(30,new ECB(42,\n15),new ECB(32,16))),new Version(39,new Array(6,26,54,82,110,138,166),new ECBlocks(30,new ECB(20,117),new ECB(4,118)),new ECBlocks(28,new ECB(40,47),new ECB(7,48)),new ECBlocks(30,new ECB(43,24),new ECB(22,25)),new ECBlocks(30,new ECB(10,15),new ECB(67,16))),new Version(40,new Array(6,30,58,86,114,142,170),new ECBlocks(30,new ECB(19,118),new ECB(6,119)),new ECBlocks(28,new ECB(18,47),new ECB(31,48)),new ECBlocks(30,new ECB(34,24),new ECB(34,25)),new ECBlocks(30,new ECB(20,15),new ECB(61,16))))}\nfunction PerspectiveTransform(a11,a21,a31,a12,a22,a32,a13,a23,a33){this.a11=a11;this.a12=a12;this.a13=a13;this.a21=a21;this.a22=a22;this.a23=a23;this.a31=a31;this.a32=a32;this.a33=a33;this.transformPoints1=function(points){var max=points.length;var a11=this.a11;var a12=this.a12;var a13=this.a13;var a21=this.a21;var a22=this.a22;var a23=this.a23;var a31=this.a31;var a32=this.a32;var a33=this.a33;for(var i=0;i<max;i+=2){var x=points[i];var y=points[i+1];var denominator=a13*x+a23*y+a33;points[i]=(a11*\nx+a21*y+a31)/denominator;points[i+1]=(a12*x+a22*y+a32)/denominator}};this.transformPoints2=function(xValues,yValues){var n=xValues.length;for(var i=0;i<n;i++){var x=xValues[i];var y=yValues[i];var denominator=this.a13*x+this.a23*y+this.a33;xValues[i]=(this.a11*x+this.a21*y+this.a31)/denominator;yValues[i]=(this.a12*x+this.a22*y+this.a32)/denominator}};this.buildAdjoint=function(){return new PerspectiveTransform(this.a22*this.a33-this.a23*this.a32,this.a23*this.a31-this.a21*this.a33,this.a21*this.a32-\nthis.a22*this.a31,this.a13*this.a32-this.a12*this.a33,this.a11*this.a33-this.a13*this.a31,this.a12*this.a31-this.a11*this.a32,this.a12*this.a23-this.a13*this.a22,this.a13*this.a21-this.a11*this.a23,this.a11*this.a22-this.a12*this.a21)};this.times=function(other){return new PerspectiveTransform(this.a11*other.a11+this.a21*other.a12+this.a31*other.a13,this.a11*other.a21+this.a21*other.a22+this.a31*other.a23,this.a11*other.a31+this.a21*other.a32+this.a31*other.a33,this.a12*other.a11+this.a22*other.a12+\nthis.a32*other.a13,this.a12*other.a21+this.a22*other.a22+this.a32*other.a23,this.a12*other.a31+this.a22*other.a32+this.a32*other.a33,this.a13*other.a11+this.a23*other.a12+this.a33*other.a13,this.a13*other.a21+this.a23*other.a22+this.a33*other.a23,this.a13*other.a31+this.a23*other.a32+this.a33*other.a33)}}\nPerspectiveTransform.quadrilateralToQuadrilateral=function(x0,y0,x1,y1,x2,y2,x3,y3,x0p,y0p,x1p,y1p,x2p,y2p,x3p,y3p){var qToS=this.quadrilateralToSquare(x0,y0,x1,y1,x2,y2,x3,y3);var sToQ=this.squareToQuadrilateral(x0p,y0p,x1p,y1p,x2p,y2p,x3p,y3p);return sToQ.times(qToS)};\nPerspectiveTransform.squareToQuadrilateral=function(x0,y0,x1,y1,x2,y2,x3,y3){dy2=y3-y2;dy3=y0-y1+y2-y3;if(dy2==0&&dy3==0)return new PerspectiveTransform(x1-x0,x2-x1,x0,y1-y0,y2-y1,y0,0,0,1);else{dx1=x1-x2;dx2=x3-x2;dx3=x0-x1+x2-x3;dy1=y1-y2;denominator=dx1*dy2-dx2*dy1;a13=(dx3*dy2-dx2*dy3)/denominator;a23=(dx1*dy3-dx3*dy1)/denominator;return new PerspectiveTransform(x1-x0+a13*x1,x3-x0+a23*x3,x0,y1-y0+a13*y1,y3-y0+a23*y3,y0,a13,a23,1)}};\nPerspectiveTransform.quadrilateralToSquare=function(x0,y0,x1,y1,x2,y2,x3,y3){return this.squareToQuadrilateral(x0,y0,x1,y1,x2,y2,x3,y3).buildAdjoint()};function DetectorResult(bits,points){this.bits=bits;this.points=points}\nfunction Detector(image){this.image=image;this.resultPointCallback=null;this.sizeOfBlackWhiteBlackRun=function(fromX,fromY,toX,toY){var steep=Math.abs(toY-fromY)>Math.abs(toX-fromX);if(steep){var temp=fromX;fromX=fromY;fromY=temp;temp=toX;toX=toY;toY=temp}var dx=Math.abs(toX-fromX);var dy=Math.abs(toY-fromY);var error=-dx>>1;var ystep=fromY<toY?1:-1;var xstep=fromX<toX?1:-1;var state=0;for(var x=fromX,y=fromY;x!=toX;x+=xstep){var realX=steep?y:x;var realY=steep?x:y;if(state==1){if(this.image[realX+\nrealY*qrcode.width])state++}else if(!this.image[realX+realY*qrcode.width])state++;if(state==3){var diffX=x-fromX;var diffY=y-fromY;return Math.sqrt(diffX*diffX+diffY*diffY)}error+=dy;if(error>0){if(y==toY)break;y+=ystep;error-=dx}}var diffX2=toX-fromX;var diffY2=toY-fromY;return Math.sqrt(diffX2*diffX2+diffY2*diffY2)};this.sizeOfBlackWhiteBlackRunBothWays=function(fromX,fromY,toX,toY){var result=this.sizeOfBlackWhiteBlackRun(fromX,fromY,toX,toY);var scale=1;var otherToX=fromX-(toX-fromX);if(otherToX<\n0){scale=fromX/(fromX-otherToX);otherToX=0}else if(otherToX>=qrcode.width){scale=(qrcode.width-1-fromX)/(otherToX-fromX);otherToX=qrcode.width-1}var otherToY=Math.floor(fromY-(toY-fromY)*scale);scale=1;if(otherToY<0){scale=fromY/(fromY-otherToY);otherToY=0}else if(otherToY>=qrcode.height){scale=(qrcode.height-1-fromY)/(otherToY-fromY);otherToY=qrcode.height-1}otherToX=Math.floor(fromX+(otherToX-fromX)*scale);result+=this.sizeOfBlackWhiteBlackRun(fromX,fromY,otherToX,otherToY);return result-1};this.calculateModuleSizeOneWay=\nfunction(pattern,otherPattern){var moduleSizeEst1=this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(pattern.X),Math.floor(pattern.Y),Math.floor(otherPattern.X),Math.floor(otherPattern.Y));var moduleSizeEst2=this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(otherPattern.X),Math.floor(otherPattern.Y),Math.floor(pattern.X),Math.floor(pattern.Y));if(isNaN(moduleSizeEst1))return moduleSizeEst2/7;if(isNaN(moduleSizeEst2))return moduleSizeEst1/7;return(moduleSizeEst1+moduleSizeEst2)/14};this.calculateModuleSize=\nfunction(topLeft,topRight,bottomLeft){return(this.calculateModuleSizeOneWay(topLeft,topRight)+this.calculateModuleSizeOneWay(topLeft,bottomLeft))/2};this.distance=function(pattern1,pattern2){xDiff=pattern1.X-pattern2.X;yDiff=pattern1.Y-pattern2.Y;return Math.sqrt(xDiff*xDiff+yDiff*yDiff)};this.computeDimension=function(topLeft,topRight,bottomLeft,moduleSize){var tltrCentersDimension=Math.round(this.distance(topLeft,topRight)/moduleSize);var tlblCentersDimension=Math.round(this.distance(topLeft,bottomLeft)/\nmoduleSize);var dimension=(tltrCentersDimension+tlblCentersDimension>>1)+7;switch(dimension&3){case 0:dimension++;break;case 2:dimension--;break;case 3:throw\"Error\";}return dimension};this.findAlignmentInRegion=function(overallEstModuleSize,estAlignmentX,estAlignmentY,allowanceFactor){var allowance=Math.floor(allowanceFactor*overallEstModuleSize);var alignmentAreaLeftX=Math.max(0,estAlignmentX-allowance);var alignmentAreaRightX=Math.min(qrcode.width-1,estAlignmentX+allowance);if(alignmentAreaRightX-\nalignmentAreaLeftX<overallEstModuleSize*3)throw\"Error\";var alignmentAreaTopY=Math.max(0,estAlignmentY-allowance);var alignmentAreaBottomY=Math.min(qrcode.height-1,estAlignmentY+allowance);var alignmentFinder=new AlignmentPatternFinder(this.image,alignmentAreaLeftX,alignmentAreaTopY,alignmentAreaRightX-alignmentAreaLeftX,alignmentAreaBottomY-alignmentAreaTopY,overallEstModuleSize,this.resultPointCallback);return alignmentFinder.find()};this.createTransform=function(topLeft,topRight,bottomLeft,alignmentPattern,\ndimension){var dimMinusThree=dimension-3.5;var bottomRightX;var bottomRightY;var sourceBottomRightX;var sourceBottomRightY;if(alignmentPattern!=null){bottomRightX=alignmentPattern.X;bottomRightY=alignmentPattern.Y;sourceBottomRightX=sourceBottomRightY=dimMinusThree-3}else{bottomRightX=topRight.X-topLeft.X+bottomLeft.X;bottomRightY=topRight.Y-topLeft.Y+bottomLeft.Y;sourceBottomRightX=sourceBottomRightY=dimMinusThree}var transform=PerspectiveTransform.quadrilateralToQuadrilateral(3.5,3.5,dimMinusThree,\n3.5,sourceBottomRightX,sourceBottomRightY,3.5,dimMinusThree,topLeft.X,topLeft.Y,topRight.X,topRight.Y,bottomRightX,bottomRightY,bottomLeft.X,bottomLeft.Y);return transform};this.sampleGrid=function(image,transform,dimension){var sampler=GridSampler;return sampler.sampleGrid3(image,dimension,transform)};this.processFinderPatternInfo=function(info){var topLeft=info.TopLeft;var topRight=info.TopRight;var bottomLeft=info.BottomLeft;var moduleSize=this.calculateModuleSize(topLeft,topRight,bottomLeft);\nif(moduleSize<1)throw\"Error\";var dimension=this.computeDimension(topLeft,topRight,bottomLeft,moduleSize);var provisionalVersion=Version.getProvisionalVersionForDimension(dimension);var modulesBetweenFPCenters=provisionalVersion.DimensionForVersion-7;var alignmentPattern=null;if(provisionalVersion.AlignmentPatternCenters.length>0){var bottomRightX=topRight.X-topLeft.X+bottomLeft.X;var bottomRightY=topRight.Y-topLeft.Y+bottomLeft.Y;var correctionToTopLeft=1-3/modulesBetweenFPCenters;var estAlignmentX=\nMath.floor(topLeft.X+correctionToTopLeft*(bottomRightX-topLeft.X));var estAlignmentY=Math.floor(topLeft.Y+correctionToTopLeft*(bottomRightY-topLeft.Y));for(var i=4;i<=16;i<<=1){alignmentPattern=this.findAlignmentInRegion(moduleSize,estAlignmentX,estAlignmentY,i);break}}var transform=this.createTransform(topLeft,topRight,bottomLeft,alignmentPattern,dimension);var bits=this.sampleGrid(this.image,transform,dimension);var points;if(alignmentPattern==null)points=new Array(bottomLeft,topLeft,topRight);\nelse points=new Array(bottomLeft,topLeft,topRight,alignmentPattern);return new DetectorResult(bits,points)};this.detect=function(){var info=(new FinderPatternFinder).findFinderPattern(this.image);return this.processFinderPatternInfo(info)}}var FORMAT_INFO_MASK_QR=21522;\nvar FORMAT_INFO_DECODE_LOOKUP=new Array(new Array(21522,0),new Array(20773,1),new Array(24188,2),new Array(23371,3),new Array(17913,4),new Array(16590,5),new Array(20375,6),new Array(19104,7),new Array(30660,8),new Array(29427,9),new Array(32170,10),new Array(30877,11),new Array(26159,12),new Array(25368,13),new Array(27713,14),new Array(26998,15),new Array(5769,16),new Array(5054,17),new Array(7399,18),new Array(6608,19),new Array(1890,20),new Array(597,21),new Array(3340,22),new Array(2107,23),\nnew Array(13663,24),new Array(12392,25),new Array(16177,26),new Array(14854,27),new Array(9396,28),new Array(8579,29),new Array(11994,30),new Array(11245,31));var BITS_SET_IN_HALF_BYTE=new Array(0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4);\nfunction FormatInformation(formatInfo){this.errorCorrectionLevel=ErrorCorrectionLevel.forBits(formatInfo>>3&3);this.dataMask=formatInfo&7;this.__defineGetter__(\"ErrorCorrectionLevel\",function(){return this.errorCorrectionLevel});this.__defineGetter__(\"DataMask\",function(){return this.dataMask});this.GetHashCode=function(){return this.errorCorrectionLevel.ordinal()<<3|dataMask};this.Equals=function(o){var other=o;return this.errorCorrectionLevel==other.errorCorrectionLevel&&this.dataMask==other.dataMask}}\nFormatInformation.numBitsDiffering=function(a,b){a^=b;return BITS_SET_IN_HALF_BYTE[a&15]+BITS_SET_IN_HALF_BYTE[URShift(a,4)&15]+BITS_SET_IN_HALF_BYTE[URShift(a,8)&15]+BITS_SET_IN_HALF_BYTE[URShift(a,12)&15]+BITS_SET_IN_HALF_BYTE[URShift(a,16)&15]+BITS_SET_IN_HALF_BYTE[URShift(a,20)&15]+BITS_SET_IN_HALF_BYTE[URShift(a,24)&15]+BITS_SET_IN_HALF_BYTE[URShift(a,28)&15]};\nFormatInformation.decodeFormatInformation=function(maskedFormatInfo){var formatInfo=FormatInformation.doDecodeFormatInformation(maskedFormatInfo);if(formatInfo!=null)return formatInfo;return FormatInformation.doDecodeFormatInformation(maskedFormatInfo^FORMAT_INFO_MASK_QR)};\nFormatInformation.doDecodeFormatInformation=function(maskedFormatInfo){var bestDifference=4294967295;var bestFormatInfo=0;for(var i=0;i<FORMAT_INFO_DECODE_LOOKUP.length;i++){var decodeInfo=FORMAT_INFO_DECODE_LOOKUP[i];var targetInfo=decodeInfo[0];if(targetInfo==maskedFormatInfo)return new FormatInformation(decodeInfo[1]);var bitsDifference=this.numBitsDiffering(maskedFormatInfo,targetInfo);if(bitsDifference<bestDifference){bestFormatInfo=decodeInfo[1];bestDifference=bitsDifference}}if(bestDifference<=\n3)return new FormatInformation(bestFormatInfo);return null};function ErrorCorrectionLevel(ordinal,bits,name){this.ordinal_Renamed_Field=ordinal;this.bits=bits;this.name=name;this.__defineGetter__(\"Bits\",function(){return this.bits});this.__defineGetter__(\"Name\",function(){return this.name});this.ordinal=function(){return this.ordinal_Renamed_Field}}ErrorCorrectionLevel.forBits=function(bits){if(bits<0||bits>=FOR_BITS.length)throw\"ArgumentException\";return FOR_BITS[bits]};\nvar L=new ErrorCorrectionLevel(0,1,\"L\");var M=new ErrorCorrectionLevel(1,0,\"M\");var Q=new ErrorCorrectionLevel(2,3,\"Q\");var H=new ErrorCorrectionLevel(3,2,\"H\");var FOR_BITS=new Array(M,L,H,Q);\nfunction BitMatrix(width,height){if(!height)height=width;if(width<1||height<1)throw\"Both dimensions must be greater than 0\";this.width=width;this.height=height;var rowSize=width>>5;if((width&31)!=0)rowSize++;this.rowSize=rowSize;this.bits=new Array(rowSize*height);for(var i=0;i<this.bits.length;i++)this.bits[i]=0;this.__defineGetter__(\"Width\",function(){return this.width});this.__defineGetter__(\"Height\",function(){return this.height});this.__defineGetter__(\"Dimension\",function(){if(this.width!=this.height)throw\"Can't call getDimension() on a non-square matrix\";\nreturn this.width});this.get_Renamed=function(x,y){var offset=y*this.rowSize+(x>>5);return(URShift(this.bits[offset],x&31)&1)!=0};this.set_Renamed=function(x,y){var offset=y*this.rowSize+(x>>5);this.bits[offset]|=1<<(x&31)};this.flip=function(x,y){var offset=y*this.rowSize+(x>>5);this.bits[offset]^=1<<(x&31)};this.clear=function(){var max=this.bits.length;for(var i=0;i<max;i++)this.bits[i]=0};this.setRegion=function(left,top,width,height){if(top<0||left<0)throw\"Left and top must be nonnegative\";if(height<\n1||width<1)throw\"Height and width must be at least 1\";var right=left+width;var bottom=top+height;if(bottom>this.height||right>this.width)throw\"The region must fit inside the matrix\";for(var y=top;y<bottom;y++){var offset=y*this.rowSize;for(var x=left;x<right;x++)this.bits[offset+(x>>5)]|=1<<(x&31)}}}\nfunction DataBlock(numDataCodewords,codewords){this.numDataCodewords=numDataCodewords;this.codewords=codewords;this.__defineGetter__(\"NumDataCodewords\",function(){return this.numDataCodewords});this.__defineGetter__(\"Codewords\",function(){return this.codewords})}\nDataBlock.getDataBlocks=function(rawCodewords,version,ecLevel){if(rawCodewords.length!=version.TotalCodewords)throw\"ArgumentException\";var ecBlocks=version.getECBlocksForLevel(ecLevel);var totalBlocks=0;var ecBlockArray=ecBlocks.getECBlocks();for(var i=0;i<ecBlockArray.length;i++)totalBlocks+=ecBlockArray[i].Count;var result=new Array(totalBlocks);var numResultBlocks=0;for(var j=0;j<ecBlockArray.length;j++){var ecBlock=ecBlockArray[j];for(var i=0;i<ecBlock.Count;i++){var numDataCodewords=ecBlock.DataCodewords;\nvar numBlockCodewords=ecBlocks.ECCodewordsPerBlock+numDataCodewords;result[numResultBlocks++]=new DataBlock(numDataCodewords,new Array(numBlockCodewords))}}var shorterBlocksTotalCodewords=result[0].codewords.length;var longerBlocksStartAt=result.length-1;while(longerBlocksStartAt>=0){var numCodewords=result[longerBlocksStartAt].codewords.length;if(numCodewords==shorterBlocksTotalCodewords)break;longerBlocksStartAt--}longerBlocksStartAt++;var shorterBlocksNumDataCodewords=shorterBlocksTotalCodewords-\necBlocks.ECCodewordsPerBlock;var rawCodewordsOffset=0;for(var i=0;i<shorterBlocksNumDataCodewords;i++)for(var j=0;j<numResultBlocks;j++)result[j].codewords[i]=rawCodewords[rawCodewordsOffset++];for(var j=longerBlocksStartAt;j<numResultBlocks;j++)result[j].codewords[shorterBlocksNumDataCodewords]=rawCodewords[rawCodewordsOffset++];var max=result[0].codewords.length;for(var i=shorterBlocksNumDataCodewords;i<max;i++)for(var j=0;j<numResultBlocks;j++){var iOffset=j<longerBlocksStartAt?i:i+1;result[j].codewords[iOffset]=\nrawCodewords[rawCodewordsOffset++]}return result};\nfunction BitMatrixParser(bitMatrix){var dimension=bitMatrix.Dimension;if(dimension<21||(dimension&3)!=1)throw\"Error BitMatrixParser\";this.bitMatrix=bitMatrix;this.parsedVersion=null;this.parsedFormatInfo=null;this.copyBit=function(i,j,versionBits){return this.bitMatrix.get_Renamed(i,j)?versionBits<<1|1:versionBits<<1};this.readFormatInformation=function(){if(this.parsedFormatInfo!=null)return this.parsedFormatInfo;var formatInfoBits=0;for(var i=0;i<6;i++)formatInfoBits=this.copyBit(i,8,formatInfoBits);\nformatInfoBits=this.copyBit(7,8,formatInfoBits);formatInfoBits=this.copyBit(8,8,formatInfoBits);formatInfoBits=this.copyBit(8,7,formatInfoBits);for(var j=5;j>=0;j--)formatInfoBits=this.copyBit(8,j,formatInfoBits);this.parsedFormatInfo=FormatInformation.decodeFormatInformation(formatInfoBits);if(this.parsedFormatInfo!=null)return this.parsedFormatInfo;var dimension=this.bitMatrix.Dimension;formatInfoBits=0;var iMin=dimension-8;for(var i=dimension-1;i>=iMin;i--)formatInfoBits=this.copyBit(i,8,formatInfoBits);\nfor(var j=dimension-7;j<dimension;j++)formatInfoBits=this.copyBit(8,j,formatInfoBits);this.parsedFormatInfo=FormatInformation.decodeFormatInformation(formatInfoBits);if(this.parsedFormatInfo!=null)return this.parsedFormatInfo;throw\"Error readFormatInformation\";};this.readVersion=function(){if(this.parsedVersion!=null)return this.parsedVersion;var dimension=this.bitMatrix.Dimension;var provisionalVersion=dimension-17>>2;if(provisionalVersion<=6)return Version.getVersionForNumber(provisionalVersion);\nvar versionBits=0;var ijMin=dimension-11;for(var j=5;j>=0;j--)for(var i=dimension-9;i>=ijMin;i--)versionBits=this.copyBit(i,j,versionBits);this.parsedVersion=Version.decodeVersionInformation(versionBits);if(this.parsedVersion!=null&&this.parsedVersion.DimensionForVersion==dimension)return this.parsedVersion;versionBits=0;for(var i=5;i>=0;i--)for(var j=dimension-9;j>=ijMin;j--)versionBits=this.copyBit(i,j,versionBits);this.parsedVersion=Version.decodeVersionInformation(versionBits);if(this.parsedVersion!=\nnull&&this.parsedVersion.DimensionForVersion==dimension)return this.parsedVersion;throw\"Error readVersion\";};this.readCodewords=function(){var formatInfo=this.readFormatInformation();var version=this.readVersion();var dataMask=DataMask.forReference(formatInfo.DataMask);var dimension=this.bitMatrix.Dimension;dataMask.unmaskBitMatrix(this.bitMatrix,dimension);var functionPattern=version.buildFunctionPattern();var readingUp=true;var result=new Array(version.TotalCodewords);var resultOffset=0;var currentByte=\n0;var bitsRead=0;for(var j=dimension-1;j>0;j-=2){if(j==6)j--;for(var count=0;count<dimension;count++){var i=readingUp?dimension-1-count:count;for(var col=0;col<2;col++)if(!functionPattern.get_Renamed(j-col,i)){bitsRead++;currentByte<<=1;if(this.bitMatrix.get_Renamed(j-col,i))currentByte|=1;if(bitsRead==8){result[resultOffset++]=currentByte;bitsRead=0;currentByte=0}}}readingUp^=true}if(resultOffset!=version.TotalCodewords)throw\"Error readCodewords\";return result}}DataMask={};\nDataMask.forReference=function(reference){if(reference<0||reference>7)throw\"System.ArgumentException\";return DataMask.DATA_MASKS[reference]};function DataMask000(){this.unmaskBitMatrix=function(bits,dimension){for(var i=0;i<dimension;i++)for(var j=0;j<dimension;j++)if(this.isMasked(i,j))bits.flip(j,i)};this.isMasked=function(i,j){return(i+j&1)==0}}\nfunction DataMask001(){this.unmaskBitMatrix=function(bits,dimension){for(var i=0;i<dimension;i++)for(var j=0;j<dimension;j++)if(this.isMasked(i,j))bits.flip(j,i)};this.isMasked=function(i,j){return(i&1)==0}}function DataMask010(){this.unmaskBitMatrix=function(bits,dimension){for(var i=0;i<dimension;i++)for(var j=0;j<dimension;j++)if(this.isMasked(i,j))bits.flip(j,i)};this.isMasked=function(i,j){return j%3==0}}\nfunction DataMask011(){this.unmaskBitMatrix=function(bits,dimension){for(var i=0;i<dimension;i++)for(var j=0;j<dimension;j++)if(this.isMasked(i,j))bits.flip(j,i)};this.isMasked=function(i,j){return(i+j)%3==0}}function DataMask100(){this.unmaskBitMatrix=function(bits,dimension){for(var i=0;i<dimension;i++)for(var j=0;j<dimension;j++)if(this.isMasked(i,j))bits.flip(j,i)};this.isMasked=function(i,j){return(URShift(i,1)+j/3&1)==0}}\nfunction DataMask101(){this.unmaskBitMatrix=function(bits,dimension){for(var i=0;i<dimension;i++)for(var j=0;j<dimension;j++)if(this.isMasked(i,j))bits.flip(j,i)};this.isMasked=function(i,j){var temp=i*j;return(temp&1)+temp%3==0}}function DataMask110(){this.unmaskBitMatrix=function(bits,dimension){for(var i=0;i<dimension;i++)for(var j=0;j<dimension;j++)if(this.isMasked(i,j))bits.flip(j,i)};this.isMasked=function(i,j){var temp=i*j;return((temp&1)+temp%3&1)==0}}\nfunction DataMask111(){this.unmaskBitMatrix=function(bits,dimension){for(var i=0;i<dimension;i++)for(var j=0;j<dimension;j++)if(this.isMasked(i,j))bits.flip(j,i)};this.isMasked=function(i,j){return((i+j&1)+i*j%3&1)==0}}DataMask.DATA_MASKS=new Array(new DataMask000,new DataMask001,new DataMask010,new DataMask011,new DataMask100,new DataMask101,new DataMask110,new DataMask111);\nfunction ReedSolomonDecoder(field){this.field=field;this.decode=function(received,twoS){var poly=new GF256Poly(this.field,received);var syndromeCoefficients=new Array(twoS);for(var i=0;i<syndromeCoefficients.length;i++)syndromeCoefficients[i]=0;var dataMatrix=false;var noError=true;for(var i=0;i<twoS;i++){var eval=poly.evaluateAt(this.field.exp(dataMatrix?i+1:i));syndromeCoefficients[syndromeCoefficients.length-1-i]=eval;if(eval!=0)noError=false}if(noError)return;var syndrome=new GF256Poly(this.field,\nsyndromeCoefficients);var sigmaOmega=this.runEuclideanAlgorithm(this.field.buildMonomial(twoS,1),syndrome,twoS);var sigma=sigmaOmega[0];var omega=sigmaOmega[1];var errorLocations=this.findErrorLocations(sigma);var errorMagnitudes=this.findErrorMagnitudes(omega,errorLocations,dataMatrix);for(var i=0;i<errorLocations.length;i++){var position=received.length-1-this.field.log(errorLocations[i]);if(position<0)throw\"ReedSolomonException Bad error location\";received[position]=GF256.addOrSubtract(received[position],\nerrorMagnitudes[i])}};this.runEuclideanAlgorithm=function(a,b,R){if(a.Degree<b.Degree){var temp=a;a=b;b=temp}var rLast=a;var r=b;var sLast=this.field.One;var s=this.field.Zero;var tLast=this.field.Zero;var t=this.field.One;while(r.Degree>=Math.floor(R/2)){var rLastLast=rLast;var sLastLast=sLast;var tLastLast=tLast;rLast=r;sLast=s;tLast=t;if(rLast.Zero)throw\"r_{i-1} was zero\";r=rLastLast;var q=this.field.Zero;var denominatorLeadingTerm=rLast.getCoefficient(rLast.Degree);var dltInverse=this.field.inverse(denominatorLeadingTerm);\nwhile(r.Degree>=rLast.Degree&&!r.Zero){var degreeDiff=r.Degree-rLast.Degree;var scale=this.field.multiply(r.getCoefficient(r.Degree),dltInverse);q=q.addOrSubtract(this.field.buildMonomial(degreeDiff,scale));r=r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff,scale))}s=q.multiply1(sLast).addOrSubtract(sLastLast);t=q.multiply1(tLast).addOrSubtract(tLastLast)}var sigmaTildeAtZero=t.getCoefficient(0);if(sigmaTildeAtZero==0)throw\"ReedSolomonException sigmaTilde(0) was zero\";var inverse=this.field.inverse(sigmaTildeAtZero);\nvar sigma=t.multiply2(inverse);var omega=r.multiply2(inverse);return new Array(sigma,omega)};this.findErrorLocations=function(errorLocator){var numErrors=errorLocator.Degree;if(numErrors==1)return new Array(errorLocator.getCoefficient(1));var result=new Array(numErrors);var e=0;for(var i=1;i<256&&e<numErrors;i++)if(errorLocator.evaluateAt(i)==0){result[e]=this.field.inverse(i);e++}if(e!=numErrors)throw\"Error locator degree does not match number of roots\";return result};this.findErrorMagnitudes=function(errorEvaluator,\nerrorLocations,dataMatrix){var s=errorLocations.length;var result=new Array(s);for(var i=0;i<s;i++){var xiInverse=this.field.inverse(errorLocations[i]);var denominator=1;for(var j=0;j<s;j++)if(i!=j)denominator=this.field.multiply(denominator,GF256.addOrSubtract(1,this.field.multiply(errorLocations[j],xiInverse)));result[i]=this.field.multiply(errorEvaluator.evaluateAt(xiInverse),this.field.inverse(denominator));if(dataMatrix)result[i]=this.field.multiply(result[i],xiInverse)}return result}}\nfunction GF256Poly(field,coefficients){if(coefficients==null||coefficients.length==0)throw\"System.ArgumentException\";this.field=field;var coefficientsLength=coefficients.length;if(coefficientsLength>1&&coefficients[0]==0){var firstNonZero=1;while(firstNonZero<coefficientsLength&&coefficients[firstNonZero]==0)firstNonZero++;if(firstNonZero==coefficientsLength)this.coefficients=field.Zero.coefficients;else{this.coefficients=new Array(coefficientsLength-firstNonZero);for(var i=0;i<this.coefficients.length;i++)this.coefficients[i]=\n0;for(var ci=0;ci<this.coefficients.length;ci++)this.coefficients[ci]=coefficients[firstNonZero+ci]}}else this.coefficients=coefficients;this.__defineGetter__(\"Zero\",function(){return this.coefficients[0]==0});this.__defineGetter__(\"Degree\",function(){return this.coefficients.length-1});this.__defineGetter__(\"Coefficients\",function(){return this.coefficients});this.getCoefficient=function(degree){return this.coefficients[this.coefficients.length-1-degree]};this.evaluateAt=function(a){if(a==0)return this.getCoefficient(0);\nvar size=this.coefficients.length;if(a==1){var result=0;for(var i=0;i<size;i++)result=GF256.addOrSubtract(result,this.coefficients[i]);return result}var result2=this.coefficients[0];for(var i=1;i<size;i++)result2=GF256.addOrSubtract(this.field.multiply(a,result2),this.coefficients[i]);return result2};this.addOrSubtract=function(other){if(this.field!=other.field)throw\"GF256Polys do not have same GF256 field\";if(this.Zero)return other;if(other.Zero)return this;var smallerCoefficients=this.coefficients;\nvar largerCoefficients=other.coefficients;if(smallerCoefficients.length>largerCoefficients.length){var temp=smallerCoefficients;smallerCoefficients=largerCoefficients;largerCoefficients=temp}var sumDiff=new Array(largerCoefficients.length);var lengthDiff=largerCoefficients.length-smallerCoefficients.length;for(var ci=0;ci<lengthDiff;ci++)sumDiff[ci]=largerCoefficients[ci];for(var i=lengthDiff;i<largerCoefficients.length;i++)sumDiff[i]=GF256.addOrSubtract(smallerCoefficients[i-lengthDiff],largerCoefficients[i]);\nreturn new GF256Poly(field,sumDiff)};this.multiply1=function(other){if(this.field!=other.field)throw\"GF256Polys do not have same GF256 field\";if(this.Zero||other.Zero)return this.field.Zero;var aCoefficients=this.coefficients;var aLength=aCoefficients.length;var bCoefficients=other.coefficients;var bLength=bCoefficients.length;var product=new Array(aLength+bLength-1);for(var i=0;i<aLength;i++){var aCoeff=aCoefficients[i];for(var j=0;j<bLength;j++)product[i+j]=GF256.addOrSubtract(product[i+j],this.field.multiply(aCoeff,\nbCoefficients[j]))}return new GF256Poly(this.field,product)};this.multiply2=function(scalar){if(scalar==0)return this.field.Zero;if(scalar==1)return this;var size=this.coefficients.length;var product=new Array(size);for(var i=0;i<size;i++)product[i]=this.field.multiply(this.coefficients[i],scalar);return new GF256Poly(this.field,product)};this.multiplyByMonomial=function(degree,coefficient){if(degree<0)throw\"System.ArgumentException\";if(coefficient==0)return this.field.Zero;var size=this.coefficients.length;\nvar product=new Array(size+degree);for(var i=0;i<product.length;i++)product[i]=0;for(var i=0;i<size;i++)product[i]=this.field.multiply(this.coefficients[i],coefficient);return new GF256Poly(this.field,product)};this.divide=function(other){if(this.field!=other.field)throw\"GF256Polys do not have same GF256 field\";if(other.Zero)throw\"Divide by 0\";var quotient=this.field.Zero;var remainder=this;var denominatorLeadingTerm=other.getCoefficient(other.Degree);var inverseDenominatorLeadingTerm=this.field.inverse(denominatorLeadingTerm);\nwhile(remainder.Degree>=other.Degree&&!remainder.Zero){var degreeDifference=remainder.Degree-other.Degree;var scale=this.field.multiply(remainder.getCoefficient(remainder.Degree),inverseDenominatorLeadingTerm);var term=other.multiplyByMonomial(degreeDifference,scale);var iterationQuotient=this.field.buildMonomial(degreeDifference,scale);quotient=quotient.addOrSubtract(iterationQuotient);remainder=remainder.addOrSubtract(term)}return new Array(quotient,remainder)}}\nfunction GF256(primitive){this.expTable=new Array(256);this.logTable=new Array(256);var x=1;for(var i=0;i<256;i++){this.expTable[i]=x;x<<=1;if(x>=256)x^=primitive}for(var i=0;i<255;i++)this.logTable[this.expTable[i]]=i;var at0=new Array(1);at0[0]=0;this.zero=new GF256Poly(this,new Array(at0));var at1=new Array(1);at1[0]=1;this.one=new GF256Poly(this,new Array(at1));this.__defineGetter__(\"Zero\",function(){return this.zero});this.__defineGetter__(\"One\",function(){return this.one});this.buildMonomial=\nfunction(degree,coefficient){if(degree<0)throw\"System.ArgumentException\";if(coefficient==0)return zero;var coefficients=new Array(degree+1);for(var i=0;i<coefficients.length;i++)coefficients[i]=0;coefficients[0]=coefficient;return new GF256Poly(this,coefficients)};this.exp=function(a){return this.expTable[a]};this.log=function(a){if(a==0)throw\"System.ArgumentException\";return this.logTable[a]};this.inverse=function(a){if(a==0)throw\"System.ArithmeticException\";return this.expTable[255-this.logTable[a]]};\nthis.multiply=function(a,b){if(a==0||b==0)return 0;if(a==1)return b;if(b==1)return a;return this.expTable[(this.logTable[a]+this.logTable[b])%255]}}GF256.QR_CODE_FIELD=new GF256(285);GF256.DATA_MATRIX_FIELD=new GF256(301);GF256.addOrSubtract=function(a,b){return a^b};Decoder={};Decoder.rsDecoder=new ReedSolomonDecoder(GF256.QR_CODE_FIELD);\nDecoder.correctErrors=function(codewordBytes,numDataCodewords){var numCodewords=codewordBytes.length;var codewordsInts=new Array(numCodewords);for(var i=0;i<numCodewords;i++)codewordsInts[i]=codewordBytes[i]&255;var numECCodewords=codewordBytes.length-numDataCodewords;try{Decoder.rsDecoder.decode(codewordsInts,numECCodewords)}catch(rse){throw rse;}for(var i=0;i<numDataCodewords;i++)codewordBytes[i]=codewordsInts[i]};\nDecoder.decode=function(bits){var parser=new BitMatrixParser(bits);var version=parser.readVersion();var ecLevel=parser.readFormatInformation().ErrorCorrectionLevel;var codewords=parser.readCodewords();var dataBlocks=DataBlock.getDataBlocks(codewords,version,ecLevel);var totalBytes=0;for(var i=0;i<dataBlocks.length;i++)totalBytes+=dataBlocks[i].NumDataCodewords;var resultBytes=new Array(totalBytes);var resultOffset=0;for(var j=0;j<dataBlocks.length;j++){var dataBlock=dataBlocks[j];var codewordBytes=\ndataBlock.Codewords;var numDataCodewords=dataBlock.NumDataCodewords;Decoder.correctErrors(codewordBytes,numDataCodewords);for(var i=0;i<numDataCodewords;i++)resultBytes[resultOffset++]=codewordBytes[i]}var reader=new QRCodeDataBlockReader(resultBytes,version.VersionNumber,ecLevel.Bits);return reader};qrcode={};qrcode.imagedata=null;qrcode.width=0;qrcode.height=0;qrcode.qrCodeSymbol=null;qrcode.debug=false;qrcode.maxImgSize=1024*1024;qrcode.sourceCanvas=null;\nqrcode.sizeOfDataLengthInfo=[[10,9,8,8],[12,11,16,10],[14,13,16,12]];qrcode.callback=null;\nqrcode.decode=function(src){if(arguments.length==0){var canvas_qr=qrcode.sourceCanvas?qrcode.sourceCanvas:document.getElementById(\"qr-canvas\");var context=canvas_qr.getContext(\"2d\");qrcode.width=canvas_qr.width;qrcode.height=canvas_qr.height;qrcode.imagedata=context.getImageData(0,0,qrcode.width,qrcode.height);qrcode.result=qrcode.process(context);if(qrcode.callback!=null)qrcode.callback(qrcode.result);return qrcode.result}else{var image=new Image;image.onload=function(){var canvas_qr=document.createElement(\"canvas\");\nvar context=canvas_qr.getContext(\"2d\");var nheight=image.height;var nwidth=image.width;if(image.width*image.height>qrcode.maxImgSize){var ir=image.width/image.height;nheight=Math.sqrt(qrcode.maxImgSize/ir);nwidth=ir*nheight}canvas_qr.width=nwidth;canvas_qr.height=nheight;context.drawImage(image,0,0,canvas_qr.width,canvas_qr.height);qrcode.width=canvas_qr.width;qrcode.height=canvas_qr.height;try{qrcode.imagedata=context.getImageData(0,0,canvas_qr.width,canvas_qr.height)}catch(e){qrcode.result=\"Cross domain image reading not supported in your browser! Save it to your computer then drag and drop the file!\";\nif(qrcode.callback!=null)qrcode.callback(qrcode.result);return}try{qrcode.result=qrcode.process(context)}catch(e){qrcode.result=\"error decoding QR Code\"}if(qrcode.callback!=null)qrcode.callback(qrcode.result)};image.src=src}};qrcode.isUrl=function(s){var regexp=/(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;return regexp.test(s)};\nqrcode.decode_url=function(s){var escaped=\"\";try{escaped=escape(s)}catch(e){escaped=s}var ret=\"\";try{ret=decodeURIComponent(escaped)}catch(e){ret=escaped}return ret};qrcode.decode_utf8=function(s){if(qrcode.isUrl(s))return qrcode.decode_url(s);else return s};\nqrcode.process=function(ctx){var start=(new Date).getTime();var image=qrcode.grayScaleToBitmap(qrcode.grayscale());if(qrcode.debug){for(var y=0;y<qrcode.height;y++)for(var x=0;x<qrcode.width;x++){var point=x*4+y*qrcode.width*4;qrcode.imagedata.data[point]=image[x+y*qrcode.width]?0:0;qrcode.imagedata.data[point+1]=image[x+y*qrcode.width]?0:0;qrcode.imagedata.data[point+2]=image[x+y*qrcode.width]?255:0}ctx.putImageData(qrcode.imagedata,0,0)}var detector=new Detector(image);var qRCodeMatrix=detector.detect();\nif(qrcode.debug)ctx.putImageData(qrcode.imagedata,0,0);var reader=Decoder.decode(qRCodeMatrix.bits);var data=reader.DataByte;var str=\"\";for(var i=0;i<data.length;i++)for(var j=0;j<data[i].length;j++)str+=String.fromCharCode(data[i][j]);var end=(new Date).getTime();var time=end-start;return qrcode.decode_utf8(str)};\nqrcode.getPixel=function(x,y){if(qrcode.width<x)throw\"point error\";if(qrcode.height<y)throw\"point error\";point=x*4+y*qrcode.width*4;p=(qrcode.imagedata.data[point]*33+qrcode.imagedata.data[point+1]*34+qrcode.imagedata.data[point+2]*33)/100;return p};qrcode.binarize=function(th){var ret=new Array(qrcode.width*qrcode.height);for(var y=0;y<qrcode.height;y++)for(var x=0;x<qrcode.width;x++){var gray=qrcode.getPixel(x,y);ret[x+y*qrcode.width]=gray<=th?true:false}return ret};\nqrcode.getMiddleBrightnessPerArea=function(image){var numSqrtArea=4;var areaWidth=Math.floor(qrcode.width/numSqrtArea);var areaHeight=Math.floor(qrcode.height/numSqrtArea);var minmax=new Array(numSqrtArea);for(var i=0;i<numSqrtArea;i++){minmax[i]=new Array(numSqrtArea);for(var i2=0;i2<numSqrtArea;i2++)minmax[i][i2]=new Array(0,0)}for(var ay=0;ay<numSqrtArea;ay++)for(var ax=0;ax<numSqrtArea;ax++){minmax[ax][ay][0]=255;for(var dy=0;dy<areaHeight;dy++)for(var dx=0;dx<areaWidth;dx++){var target=image[areaWidth*\nax+dx+(areaHeight*ay+dy)*qrcode.width];if(target<minmax[ax][ay][0])minmax[ax][ay][0]=target;if(target>minmax[ax][ay][1])minmax[ax][ay][1]=target}}var middle=new Array(numSqrtArea);for(var i3=0;i3<numSqrtArea;i3++)middle[i3]=new Array(numSqrtArea);for(var ay=0;ay<numSqrtArea;ay++)for(var ax=0;ax<numSqrtArea;ax++)middle[ax][ay]=Math.floor((minmax[ax][ay][0]+minmax[ax][ay][1])/2);return middle};\nqrcode.grayScaleToBitmap=function(grayScale){var middle=qrcode.getMiddleBrightnessPerArea(grayScale);var sqrtNumArea=middle.length;var areaWidth=Math.floor(qrcode.width/sqrtNumArea);var areaHeight=Math.floor(qrcode.height/sqrtNumArea);var bitmap=new Array(qrcode.height*qrcode.width);for(var ay=0;ay<sqrtNumArea;ay++)for(var ax=0;ax<sqrtNumArea;ax++)for(var dy=0;dy<areaHeight;dy++)for(var dx=0;dx<areaWidth;dx++)bitmap[areaWidth*ax+dx+(areaHeight*ay+dy)*qrcode.width]=grayScale[areaWidth*ax+dx+(areaHeight*\nay+dy)*qrcode.width]<middle[ax][ay]?true:false;return bitmap};qrcode.grayscale=function(){var ret=new Array(qrcode.width*qrcode.height);for(var y=0;y<qrcode.height;y++)for(var x=0;x<qrcode.width;x++){var gray=qrcode.getPixel(x,y);ret[x+y*qrcode.width]=gray}return ret};function URShift(number,bits){if(number>=0)return number>>bits;else return(number>>bits)+(2<<~bits)}\nArray.prototype.remove=function(from,to){var rest=this.slice((to||from)+1||this.length);this.length=from<0?this.length+from:from;return this.push.apply(this,rest)};var MIN_SKIP=3;var MAX_MODULES=57;var INTEGER_MATH_SHIFT=8;var CENTER_QUORUM=2;\nqrcode.orderBestPatterns=function(patterns){function distance(pattern1,pattern2){xDiff=pattern1.X-pattern2.X;yDiff=pattern1.Y-pattern2.Y;return Math.sqrt(xDiff*xDiff+yDiff*yDiff)}function crossProductZ(pointA,pointB,pointC){var bX=pointB.x;var bY=pointB.y;return(pointC.x-bX)*(pointA.y-bY)-(pointC.y-bY)*(pointA.x-bX)}var zeroOneDistance=distance(patterns[0],patterns[1]);var oneTwoDistance=distance(patterns[1],patterns[2]);var zeroTwoDistance=distance(patterns[0],patterns[2]);var pointA,pointB,pointC;\nif(oneTwoDistance>=zeroOneDistance&&oneTwoDistance>=zeroTwoDistance){pointB=patterns[0];pointA=patterns[1];pointC=patterns[2]}else if(zeroTwoDistance>=oneTwoDistance&&zeroTwoDistance>=zeroOneDistance){pointB=patterns[1];pointA=patterns[0];pointC=patterns[2]}else{pointB=patterns[2];pointA=patterns[0];pointC=patterns[1]}if(crossProductZ(pointA,pointB,pointC)<0){var temp=pointA;pointA=pointC;pointC=temp}patterns[0]=pointA;patterns[1]=pointB;patterns[2]=pointC};\nfunction FinderPattern(posX,posY,estimatedModuleSize){this.x=posX;this.y=posY;this.count=1;this.estimatedModuleSize=estimatedModuleSize;this.__defineGetter__(\"EstimatedModuleSize\",function(){return this.estimatedModuleSize});this.__defineGetter__(\"Count\",function(){return this.count});this.__defineGetter__(\"X\",function(){return this.x});this.__defineGetter__(\"Y\",function(){return this.y});this.incrementCount=function(){this.count++};this.aboutEquals=function(moduleSize,i,j){if(Math.abs(i-this.y)<=\nmoduleSize&&Math.abs(j-this.x)<=moduleSize){var moduleSizeDiff=Math.abs(moduleSize-this.estimatedModuleSize);return moduleSizeDiff<=1||moduleSizeDiff/this.estimatedModuleSize<=1}return false}}\nfunction FinderPatternInfo(patternCenters){this.bottomLeft=patternCenters[0];this.topLeft=patternCenters[1];this.topRight=patternCenters[2];this.__defineGetter__(\"BottomLeft\",function(){return this.bottomLeft});this.__defineGetter__(\"TopLeft\",function(){return this.topLeft});this.__defineGetter__(\"TopRight\",function(){return this.topRight})}\nfunction FinderPatternFinder(){this.image=null;this.possibleCenters=[];this.hasSkipped=false;this.crossCheckStateCount=new Array(0,0,0,0,0);this.resultPointCallback=null;this.__defineGetter__(\"CrossCheckStateCount\",function(){this.crossCheckStateCount[0]=0;this.crossCheckStateCount[1]=0;this.crossCheckStateCount[2]=0;this.crossCheckStateCount[3]=0;this.crossCheckStateCount[4]=0;return this.crossCheckStateCount});this.foundPatternCross=function(stateCount){var totalModuleSize=0;for(var i=0;i<5;i++){var count=\nstateCount[i];if(count==0)return false;totalModuleSize+=count}if(totalModuleSize<7)return false;var moduleSize=Math.floor((totalModuleSize<<INTEGER_MATH_SHIFT)/7);var maxVariance=Math.floor(moduleSize/2);return Math.abs(moduleSize-(stateCount[0]<<INTEGER_MATH_SHIFT))<maxVariance&&Math.abs(moduleSize-(stateCount[1]<<INTEGER_MATH_SHIFT))<maxVariance&&Math.abs(3*moduleSize-(stateCount[2]<<INTEGER_MATH_SHIFT))<3*maxVariance&&Math.abs(moduleSize-(stateCount[3]<<INTEGER_MATH_SHIFT))<maxVariance&&Math.abs(moduleSize-\n(stateCount[4]<<INTEGER_MATH_SHIFT))<maxVariance};this.centerFromEnd=function(stateCount,end){return end-stateCount[4]-stateCount[3]-stateCount[2]/2};this.crossCheckVertical=function(startI,centerJ,maxCount,originalStateCountTotal){var image=this.image;var maxI=qrcode.height;var stateCount=this.CrossCheckStateCount;var i=startI;while(i>=0&&image[centerJ+i*qrcode.width]){stateCount[2]++;i--}if(i<0)return NaN;while(i>=0&&!image[centerJ+i*qrcode.width]&&stateCount[1]<=maxCount){stateCount[1]++;i--}if(i<\n0||stateCount[1]>maxCount)return NaN;while(i>=0&&image[centerJ+i*qrcode.width]&&stateCount[0]<=maxCount){stateCount[0]++;i--}if(stateCount[0]>maxCount)return NaN;i=startI+1;while(i<maxI&&image[centerJ+i*qrcode.width]){stateCount[2]++;i++}if(i==maxI)return NaN;while(i<maxI&&!image[centerJ+i*qrcode.width]&&stateCount[3]<maxCount){stateCount[3]++;i++}if(i==maxI||stateCount[3]>=maxCount)return NaN;while(i<maxI&&image[centerJ+i*qrcode.width]&&stateCount[4]<maxCount){stateCount[4]++;i++}if(stateCount[4]>=\nmaxCount)return NaN;var stateCountTotal=stateCount[0]+stateCount[1]+stateCount[2]+stateCount[3]+stateCount[4];if(5*Math.abs(stateCountTotal-originalStateCountTotal)>=2*originalStateCountTotal)return NaN;return this.foundPatternCross(stateCount)?this.centerFromEnd(stateCount,i):NaN};this.crossCheckHorizontal=function(startJ,centerI,maxCount,originalStateCountTotal){var image=this.image;var maxJ=qrcode.width;var stateCount=this.CrossCheckStateCount;var j=startJ;while(j>=0&&image[j+centerI*qrcode.width]){stateCount[2]++;\nj--}if(j<0)return NaN;while(j>=0&&!image[j+centerI*qrcode.width]&&stateCount[1]<=maxCount){stateCount[1]++;j--}if(j<0||stateCount[1]>maxCount)return NaN;while(j>=0&&image[j+centerI*qrcode.width]&&stateCount[0]<=maxCount){stateCount[0]++;j--}if(stateCount[0]>maxCount)return NaN;j=startJ+1;while(j<maxJ&&image[j+centerI*qrcode.width]){stateCount[2]++;j++}if(j==maxJ)return NaN;while(j<maxJ&&!image[j+centerI*qrcode.width]&&stateCount[3]<maxCount){stateCount[3]++;j++}if(j==maxJ||stateCount[3]>=maxCount)return NaN;\nwhile(j<maxJ&&image[j+centerI*qrcode.width]&&stateCount[4]<maxCount){stateCount[4]++;j++}if(stateCount[4]>=maxCount)return NaN;var stateCountTotal=stateCount[0]+stateCount[1]+stateCount[2]+stateCount[3]+stateCount[4];if(5*Math.abs(stateCountTotal-originalStateCountTotal)>=originalStateCountTotal)return NaN;return this.foundPatternCross(stateCount)?this.centerFromEnd(stateCount,j):NaN};this.handlePossibleCenter=function(stateCount,i,j){var stateCountTotal=stateCount[0]+stateCount[1]+stateCount[2]+\nstateCount[3]+stateCount[4];var centerJ=this.centerFromEnd(stateCount,j);var centerI=this.crossCheckVertical(i,Math.floor(centerJ),stateCount[2],stateCountTotal);if(!isNaN(centerI)){centerJ=this.crossCheckHorizontal(Math.floor(centerJ),Math.floor(centerI),stateCount[2],stateCountTotal);if(!isNaN(centerJ)){var estimatedModuleSize=stateCountTotal/7;var found=false;var max=this.possibleCenters.length;for(var index=0;index<max;index++){var center=this.possibleCenters[index];if(center.aboutEquals(estimatedModuleSize,\ncenterI,centerJ)){center.incrementCount();found=true;break}}if(!found){var point=new FinderPattern(centerJ,centerI,estimatedModuleSize);this.possibleCenters.push(point);if(this.resultPointCallback!=null)this.resultPointCallback.foundPossibleResultPoint(point)}return true}}return false};this.selectBestPatterns=function(){var startSize=this.possibleCenters.length;if(startSize<3)throw\"Couldn't find enough finder patterns\";if(startSize>3){var totalModuleSize=0;var square=0;for(var i=0;i<startSize;i++){var centerValue=\nthis.possibleCenters[i].EstimatedModuleSize;totalModuleSize+=centerValue;square+=centerValue*centerValue}var average=totalModuleSize/startSize;this.possibleCenters.sort(function(center1,center2){var dA=Math.abs(center2.EstimatedModuleSize-average);var dB=Math.abs(center1.EstimatedModuleSize-average);if(dA<dB)return-1;else if(dA==dB)return 0;else return 1});var stdDev=Math.sqrt(square/startSize-average*average);var limit=Math.max(.2*average,stdDev);for(var i=0;i<this.possibleCenters.length&&this.possibleCenters.length>\n3;i++){var pattern=this.possibleCenters[i];if(Math.abs(pattern.EstimatedModuleSize-average)>limit){this.possibleCenters.remove(i);i--}}}if(this.possibleCenters.length>3)this.possibleCenters.sort(function(a,b){if(a.count>b.count)return-1;if(a.count<b.count)return 1;return 0});return new Array(this.possibleCenters[0],this.possibleCenters[1],this.possibleCenters[2])};this.findRowSkip=function(){var max=this.possibleCenters.length;if(max<=1)return 0;var firstConfirmedCenter=null;for(var i=0;i<max;i++){var center=\nthis.possibleCenters[i];if(center.Count>=CENTER_QUORUM)if(firstConfirmedCenter==null)firstConfirmedCenter=center;else{this.hasSkipped=true;return Math.floor((Math.abs(firstConfirmedCenter.X-center.X)-Math.abs(firstConfirmedCenter.Y-center.Y))/2)}}return 0};this.haveMultiplyConfirmedCenters=function(){var confirmedCount=0;var totalModuleSize=0;var max=this.possibleCenters.length;for(var i=0;i<max;i++){var pattern=this.possibleCenters[i];if(pattern.Count>=CENTER_QUORUM){confirmedCount++;totalModuleSize+=\npattern.EstimatedModuleSize}}if(confirmedCount<3)return false;var average=totalModuleSize/max;var totalDeviation=0;for(var i=0;i<max;i++){pattern=this.possibleCenters[i];totalDeviation+=Math.abs(pattern.EstimatedModuleSize-average)}return totalDeviation<=.05*totalModuleSize};this.findFinderPattern=function(image){var tryHarder=false;this.image=image;var maxI=qrcode.height;var maxJ=qrcode.width;var iSkip=Math.floor(3*maxI/(4*MAX_MODULES));if(iSkip<MIN_SKIP||tryHarder)iSkip=MIN_SKIP;var done=false;\nvar stateCount=new Array(5);for(var i=iSkip-1;i<maxI&&!done;i+=iSkip){stateCount[0]=0;stateCount[1]=0;stateCount[2]=0;stateCount[3]=0;stateCount[4]=0;var currentState=0;for(var j=0;j<maxJ;j++)if(image[j+i*qrcode.width]){if((currentState&1)==1)currentState++;stateCount[currentState]++}else if((currentState&1)==0)if(currentState==4)if(this.foundPatternCross(stateCount)){var confirmed=this.handlePossibleCenter(stateCount,i,j);if(confirmed){iSkip=2;if(this.hasSkipped)done=this.haveMultiplyConfirmedCenters();\nelse{var rowSkip=this.findRowSkip();if(rowSkip>stateCount[2]){i+=rowSkip-stateCount[2]-iSkip;j=maxJ-1}}}else{do j++;while(j<maxJ&&!image[j+i*qrcode.width]);j--}currentState=0;stateCount[0]=0;stateCount[1]=0;stateCount[2]=0;stateCount[3]=0;stateCount[4]=0}else{stateCount[0]=stateCount[2];stateCount[1]=stateCount[3];stateCount[2]=stateCount[4];stateCount[3]=1;stateCount[4]=0;currentState=3}else stateCount[++currentState]++;else stateCount[currentState]++;if(this.foundPatternCross(stateCount)){var confirmed=\nthis.handlePossibleCenter(stateCount,i,maxJ);if(confirmed){iSkip=stateCount[0];if(this.hasSkipped)done=haveMultiplyConfirmedCenters()}}}var patternInfo=this.selectBestPatterns();qrcode.orderBestPatterns(patternInfo);return new FinderPatternInfo(patternInfo)}}\nfunction AlignmentPattern(posX,posY,estimatedModuleSize){this.x=posX;this.y=posY;this.count=1;this.estimatedModuleSize=estimatedModuleSize;this.__defineGetter__(\"EstimatedModuleSize\",function(){return this.estimatedModuleSize});this.__defineGetter__(\"Count\",function(){return this.count});this.__defineGetter__(\"X\",function(){return Math.floor(this.x)});this.__defineGetter__(\"Y\",function(){return Math.floor(this.y)});this.incrementCount=function(){this.count++};this.aboutEquals=function(moduleSize,\ni,j){if(Math.abs(i-this.y)<=moduleSize&&Math.abs(j-this.x)<=moduleSize){var moduleSizeDiff=Math.abs(moduleSize-this.estimatedModuleSize);return moduleSizeDiff<=1||moduleSizeDiff/this.estimatedModuleSize<=1}return false}}\nfunction AlignmentPatternFinder(image,startX,startY,width,height,moduleSize,resultPointCallback){this.image=image;this.possibleCenters=new Array;this.startX=startX;this.startY=startY;this.width=width;this.height=height;this.moduleSize=moduleSize;this.crossCheckStateCount=new Array(0,0,0);this.resultPointCallback=resultPointCallback;this.centerFromEnd=function(stateCount,end){return end-stateCount[2]-stateCount[1]/2};this.foundPatternCross=function(stateCount){var moduleSize=this.moduleSize;var maxVariance=\nmoduleSize/2;for(var i=0;i<3;i++)if(Math.abs(moduleSize-stateCount[i])>=maxVariance)return false;return true};this.crossCheckVertical=function(startI,centerJ,maxCount,originalStateCountTotal){var image=this.image;var maxI=qrcode.height;var stateCount=this.crossCheckStateCount;stateCount[0]=0;stateCount[1]=0;stateCount[2]=0;var i=startI;while(i>=0&&image[centerJ+i*qrcode.width]&&stateCount[1]<=maxCount){stateCount[1]++;i--}if(i<0||stateCount[1]>maxCount)return NaN;while(i>=0&&!image[centerJ+i*qrcode.width]&&\nstateCount[0]<=maxCount){stateCount[0]++;i--}if(stateCount[0]>maxCount)return NaN;i=startI+1;while(i<maxI&&image[centerJ+i*qrcode.width]&&stateCount[1]<=maxCount){stateCount[1]++;i++}if(i==maxI||stateCount[1]>maxCount)return NaN;while(i<maxI&&!image[centerJ+i*qrcode.width]&&stateCount[2]<=maxCount){stateCount[2]++;i++}if(stateCount[2]>maxCount)return NaN;var stateCountTotal=stateCount[0]+stateCount[1]+stateCount[2];if(5*Math.abs(stateCountTotal-originalStateCountTotal)>=2*originalStateCountTotal)return NaN;\nreturn this.foundPatternCross(stateCount)?this.centerFromEnd(stateCount,i):NaN};this.handlePossibleCenter=function(stateCount,i,j){var stateCountTotal=stateCount[0]+stateCount[1]+stateCount[2];var centerJ=this.centerFromEnd(stateCount,j);var centerI=this.crossCheckVertical(i,Math.floor(centerJ),2*stateCount[1],stateCountTotal);if(!isNaN(centerI)){var estimatedModuleSize=(stateCount[0]+stateCount[1]+stateCount[2])/3;var max=this.possibleCenters.length;for(var index=0;index<max;index++){var center=\nthis.possibleCenters[index];if(center.aboutEquals(estimatedModuleSize,centerI,centerJ))return new AlignmentPattern(centerJ,centerI,estimatedModuleSize)}var point=new AlignmentPattern(centerJ,centerI,estimatedModuleSize);this.possibleCenters.push(point);if(this.resultPointCallback!=null)this.resultPointCallback.foundPossibleResultPoint(point)}return null};this.find=function(){var startX=this.startX;var height=this.height;var maxJ=startX+width;var middleI=startY+(height>>1);var stateCount=new Array(0,\n0,0);for(var iGen=0;iGen<height;iGen++){var i=middleI+((iGen&1)==0?iGen+1>>1:-(iGen+1>>1));stateCount[0]=0;stateCount[1]=0;stateCount[2]=0;var j=startX;while(j<maxJ&&!image[j+qrcode.width*i])j++;var currentState=0;while(j<maxJ){if(image[j+i*qrcode.width])if(currentState==1)stateCount[currentState]++;else if(currentState==2){if(this.foundPatternCross(stateCount)){var confirmed=this.handlePossibleCenter(stateCount,i,j);if(confirmed!=null)return confirmed}stateCount[0]=stateCount[2];stateCount[1]=1;\nstateCount[2]=0;currentState=1}else stateCount[++currentState]++;else{if(currentState==1)currentState++;stateCount[currentState]++}j++}if(this.foundPatternCross(stateCount)){var confirmed=this.handlePossibleCenter(stateCount,i,maxJ);if(confirmed!=null)return confirmed}}if(!(this.possibleCenters.length==0))return this.possibleCenters[0];throw\"Couldn't find enough alignment patterns\";}}\nfunction QRCodeDataBlockReader(blocks,version,numErrorCorrectionCode){this.blockPointer=0;this.bitPointer=7;this.dataLength=0;this.blocks=blocks;this.numErrorCorrectionCode=numErrorCorrectionCode;if(version<=9)this.dataLengthMode=0;else if(version>=10&&version<=26)this.dataLengthMode=1;else if(version>=27&&version<=40)this.dataLengthMode=2;this.getNextBits=function(numBits){var bits=0;if(numBits<this.bitPointer+1){var mask=0;for(var i=0;i<numBits;i++)mask+=1<<i;mask<<=this.bitPointer-numBits+1;bits=\n(this.blocks[this.blockPointer]&mask)>>this.bitPointer-numBits+1;this.bitPointer-=numBits;return bits}else if(numBits<this.bitPointer+1+8){var mask1=0;for(var i=0;i<this.bitPointer+1;i++)mask1+=1<<i;bits=(this.blocks[this.blockPointer]&mask1)<<numBits-(this.bitPointer+1);this.blockPointer++;bits+=this.blocks[this.blockPointer]>>8-(numBits-(this.bitPointer+1));this.bitPointer=this.bitPointer-numBits%8;if(this.bitPointer<0)this.bitPointer=8+this.bitPointer;return bits}else if(numBits<this.bitPointer+\n1+16){var mask1=0;var mask3=0;for(var i=0;i<this.bitPointer+1;i++)mask1+=1<<i;var bitsFirstBlock=(this.blocks[this.blockPointer]&mask1)<<numBits-(this.bitPointer+1);this.blockPointer++;var bitsSecondBlock=this.blocks[this.blockPointer]<<numBits-(this.bitPointer+1+8);this.blockPointer++;for(var i=0;i<numBits-(this.bitPointer+1+8);i++)mask3+=1<<i;mask3<<=8-(numBits-(this.bitPointer+1+8));var bitsThirdBlock=(this.blocks[this.blockPointer]&mask3)>>8-(numBits-(this.bitPointer+1+8));bits=bitsFirstBlock+\nbitsSecondBlock+bitsThirdBlock;this.bitPointer=this.bitPointer-(numBits-8)%8;if(this.bitPointer<0)this.bitPointer=8+this.bitPointer;return bits}else return 0};this.NextMode=function(){if(this.blockPointer>this.blocks.length-this.numErrorCorrectionCode-2)return 0;else return this.getNextBits(4)};this.getDataLength=function(modeIndicator){var index=0;while(true){if(modeIndicator>>index==1)break;index++}return this.getNextBits(qrcode.sizeOfDataLengthInfo[this.dataLengthMode][index])};this.getRomanAndFigureString=\nfunction(dataLength){var length=dataLength;var intData=0;var strData=\"\";var tableRomanAndFigure=new Array(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\" \",\"$\",\"%\",\"*\",\"+\",\"-\",\".\",\"/\",\":\");do if(length>1){intData=this.getNextBits(11);var firstLetter=Math.floor(intData/45);var secondLetter=intData%45;strData+=tableRomanAndFigure[firstLetter];strData+=tableRomanAndFigure[secondLetter];length-=2}else if(length==\n1){intData=this.getNextBits(6);strData+=tableRomanAndFigure[intData];length-=1}while(length>0);return strData};this.getFigureString=function(dataLength){var length=dataLength;var intData=0;var strData=\"\";do{if(length>=3){intData=this.getNextBits(10);if(intData<100)strData+=\"0\";if(intData<10)strData+=\"0\";length-=3}else if(length==2){intData=this.getNextBits(7);if(intData<10)strData+=\"0\";length-=2}else if(length==1){intData=this.getNextBits(4);length-=1}strData+=intData}while(length>0);return strData};\nthis.get8bitByteArray=function(dataLength){var length=dataLength;var intData=0;var output=new Array;do{intData=this.getNextBits(8);output.push(intData);length--}while(length>0);return output};this.getKanjiString=function(dataLength){var length=dataLength;var intData=0;var unicodeString=\"\";do{intData=getNextBits(13);var lowerByte=intData%192;var higherByte=intData/192;var tempWord=(higherByte<<8)+lowerByte;var shiftjisWord=0;if(tempWord+33088<=40956)shiftjisWord=tempWord+33088;else shiftjisWord=tempWord+\n49472;unicodeString+=String.fromCharCode(shiftjisWord);length--}while(length>0);return unicodeString};this.__defineGetter__(\"DataByte\",function(){var output=new Array;var MODE_NUMBER=1;var MODE_ROMAN_AND_NUMBER=2;var MODE_8BIT_BYTE=4;var MODE_KANJI=8;do{var mode=this.NextMode();if(mode==0)if(output.length>0)break;else throw\"Empty data block\";if(mode!=MODE_NUMBER&&mode!=MODE_ROMAN_AND_NUMBER&&mode!=MODE_8BIT_BYTE&&mode!=MODE_KANJI)throw\"Invalid mode: \"+mode+\" in (block:\"+this.blockPointer+\" bit:\"+\nthis.bitPointer+\")\";dataLength=this.getDataLength(mode);if(dataLength<1)throw\"Invalid data length: \"+dataLength;switch(mode){case MODE_NUMBER:var temp_str=this.getFigureString(dataLength);var ta=new Array(temp_str.length);for(var j=0;j<temp_str.length;j++)ta[j]=temp_str.charCodeAt(j);output.push(ta);break;case MODE_ROMAN_AND_NUMBER:var temp_str=this.getRomanAndFigureString(dataLength);var ta=new Array(temp_str.length);for(var j=0;j<temp_str.length;j++)ta[j]=temp_str.charCodeAt(j);output.push(ta);\nbreak;case MODE_8BIT_BYTE:var temp_sbyteArray3=this.get8bitByteArray(dataLength);output.push(temp_sbyteArray3);break;case MODE_KANJI:var temp_str=this.getKanjiString(dataLength);output.push(temp_str);break}}while(true);return output})};","/*!\n * WebCodeCamJQuery 1.7.0 jQuery plugin Bar code and QR code decoder \n * Author: Tóth András\n * Web: http://atandrastoth.co.uk\n * email: atandrastoth@gmail.com\n * Licensed under the MIT license\n */\n;\n(function($, window, document, undefined) {\n    'use strict';\n    var pluginName = 'WebCodeCamJQuery';\n    var mediaDevices = navigator.mediaDevices || ((navigator.getUserMedia || navigator.mozGetUserMedia || navigator.webkitGetUserMedia) ? {\n        getUserMedia: function(c) {\n            return new Promise(function(y, n) {\n                (navigator.getUserMedia || navigator.mozGetUserMedia || navigator.webkitGetUserMedia).call(navigator, c, y, n);\n            });\n        },\n        enumerateDevices: function(c) {\n            return new Promise(function(c, y, n) {\n                (MediaStreamTrack.getSources).call(navigator, c, y, n);\n            });\n        }\n    } : null);\n    HTMLVideoElement.prototype.streamSrc = ('srcObject' in HTMLVideoElement.prototype) ? function(stream) {\n        this.srcObject = !!stream ? stream : null;\n    } : function(stream) {\n        this.src = !!stream ? (window.URL || window.webkitURL).createObjectURL(stream) : new String();\n    };\n    var Self, display, videoSelect, lastImageSrc, con, beepSound, w, h,\n        DecodeWorker = new Worker('/qrReader/js/DecoderWorker.js'),\n        video = $('<video muted autoplay></video>')[0],\n        flipped = false,\n        isStreaming = false,\n        delayBool = false,\n        initialized = false,\n        localStream = null,\n        defaults = {\n            decodeQRCodeRate: 5,\n            decodeBarCodeRate: 5,\n            frameRate: 15,\n            width: 320,\n            height: 240,\n            constraints: {\n                video: {\n                    mandatory: {\n                        maxWidth: 1280,\n                        maxHeight: 720\n                    },\n                    optional: [{\n                        sourceId: true\n                    }]\n                },\n                audio: false\n            },\n            flipVertical: false,\n            flipHorizontal: false,\n            zoom: -1,\n            beep: 'audio/beep.mp3',\n            brightness: 0,\n            autoBrightnessValue: false,\n            grayScale: false,\n            contrast: 0,\n            threshold: 0,\n            sharpness: [],\n            resultFunction: function(resText, lastImageSrc) {\n                console.log(resText);\n            },\n            cameraSuccess: function(stream) {\n                console.log('cameraSuccess');\n            },\n            canPlayFunction: function() {\n                console.log('canPlayFunction');\n            },\n            getDevicesError: function(error) {\n                console.log(error);\n            },\n            getUserMediaError: function(error) {\n                console.log(error);\n            },\n            cameraError: function(error) {\n                console.log(error);\n            }\n        };\n\n    function Plugin(element, options) {\n        Self = this;\n        this.element = element;\n        display = element;\n        this.options = $.extend({}, defaults, options);\n        this._defaults = defaults;\n        this._name = pluginName;\n        return this;\n    }\n\n    function init() {\n        con = display.getContext('2d');\n        w = Self.options.width;\n        h = Self.options.height;\n        var constraints = changeConstraints();\n        try {\n            mediaDevices.getUserMedia(constraints).then(cameraSuccess).catch(function(error) {\n                Self.options.cameraError(error);\n                return false;\n            });\n        } catch (error) {\n            Self.options.getUserMediaError(error);\n            return false;\n        }\n        return true;\n    }\n\n    function play() {\n        if (!localStream) {\n            init();\n        }\n        delayBool = true;\n        video.play();\n        setTimeout(function() {\n            delayBool = false;\n            if (Self.options.decodeBarCodeRate) {\n                tryParseBarCode();\n            }\n            if (Self.options.decodeQRCodeRate) {\n                tryParseQRCode();\n            }\n        }, 2E3);\n    }\n\n    function stop() {\n        con.clearRect(0, 0, w, h);\n        delayBool = true;\n        video.pause();\n        video.streamSrc(null);\n        try {\n            localStream.stop();\n        } catch (e) {\n            localStream.active = false;\n            localStream.enabled = false;\n        }\n        localStream = null;\n    }\n\n    function pause() {\n        delayBool = true;\n        video.pause();\n    }\n\n    function cameraSuccess(stream) {\n        localStream = stream;\n        video.streamSrc(stream);\n        video.play();\n        Self.options.cameraSuccess(stream);\n    }\n\n    function cameraError(error) {\n        Self.options.cameraError(error);\n    }\n\n    function setEventListeners() {\n        $(video).on('canplay', function(e) {\n            if (!isStreaming) {\n                if (video.videoWidth > 0) {\n                    h = video.videoHeight / (video.videoWidth / w);\n                }\n                $(display).attr('width', w);\n                $(display).attr('height', h);\n                if (Self.options.flipHorizontal) {\n                    con.scale(-1, 1);\n                    con.translate(-w, 0);\n                }\n                if (Self.options.flipVertical) {\n                    con.scale(1, -1);\n                    con.translate(0, -h);\n                }\n                isStreaming = true;\n                if (Self.options.decodeQRCodeRate || Self.options.decodeBarCodeRate) {\n                    delay();\n                }\n            }\n        });\n        $(video).on('play', function() {\n            setInterval(function() {\n                if (video.paused || video.ended) {\n                    return;\n                }\n                var z = Self.options.zoom;\n                if (z < 0) {\n                    z = optimalZoom();\n                }\n                con.drawImage(video, (w * z - w) / -2, (h * z - h) / -2, w * z, h * z);\n                var imageData = con.getImageData(0, 0, w, h);\n                if (Self.options.grayScale) {\n                    imageData = grayScale(imageData);\n                }\n                if (Self.options.brightness !== 0 || Self.options.autoBrightnessValue) {\n                    imageData = brightness(imageData, Self.options.brightness);\n                }\n                if (Self.options.contrast !== 0) {\n                    imageData = contrast(imageData, Self.options.contrast);\n                }\n                if (Self.options.threshold !== 0) {\n                    imageData = threshold(imageData, Self.options.threshold);\n                }\n                if (Self.options.sharpness.length !== 0) {\n                    imageData = convolute(imageData, Self.options.sharpness);\n                }\n                con.putImageData(imageData, 0, 0);\n            }, 1E3 / Self.options.frameRate);\n        });\n    }\n\n    function setCallBack() {\n        DecodeWorker.onmessage = function(e) {\n            if (delayBool || video.paused) {\n                return;\n            }\n            if (e.data.success && e.data.result[0].length > 1 && e.data.result[0].indexOf('undefined') == -1) {\n                beepSound.play();\n                delayBool = true;\n                delay();\n                setTimeout(function() {\n                    Self.options.resultFunction(e.data.result[0], lastImageSrc);\n                }, 0);\n            } else {\n                if (e.data.finished && Self.options.decodeBarCodeRate) {\n                    flipped = !flipped;\n                    setTimeout(tryParseBarCode, 1E3 / Self.options.decodeBarCodeRate);\n                }\n            }\n        };\n        qrcode.callback = function(a) {\n            if (delayBool || video.paused) {\n                return;\n            }\n            beepSound.play();\n            delayBool = true;\n            delay();\n            setTimeout(function() {\n                Self.options.resultFunction(a, lastImageSrc);\n            }, 0);\n        };\n    }\n\n    function tryParseBarCode() {\n        var flipMode = flipped === true ? 'flip' : 'normal';\n        lastImageSrc = display.toDataURL();\n        DecodeWorker.postMessage({\n            ImageData: con.getImageData(0, 0, w, h).data,\n            Width: w,\n            Height: h,\n            cmd: flipMode,\n            DecodeNr: 1,\n            LowLight: false\n        });\n    }\n\n    function tryParseQRCode() {\n        try {\n            lastImageSrc = display.toDataURL();\n            qrcode.decode();\n        } catch (e) {\n            if (!delayBool) {\n                setTimeout(tryParseQRCode, 1E3 / Self.options.decodeQRCodeRate);\n            }\n        }\n    }\n\n    function delay() {\n        setTimeout(play, 500, true);\n    }\n\n    function optimalZoom() {\n        return video.videoHeight / h;\n    }\n\n    function getImageLightness() {\n        var pixels = con.getImageData(0, 0, w, h),\n            d = pixels.data,\n            colorSum = 0,\n            r, g, b, avg;\n        for (var x = 0, len = d.length; x < len; x += 4) {\n            r = d[x];\n            g = d[x + 1];\n            b = d[x + 2];\n            avg = Math.floor((r + g + b) / 3);\n            colorSum += avg;\n        }\n        return Math.floor(colorSum / (w * h));\n    }\n\n    function brightness(pixels, adjustment) {\n        adjustment = adjustment === 0 && Self.options.autoBrightnessValue ? Self.options.autoBrightnessValue - getImageLightness() : adjustment;\n        var d = pixels.data;\n        for (var i = 0; i < d.length; i += 4) {\n            d[i] += adjustment;\n            d[i + 1] += adjustment;\n            d[i + 2] += adjustment;\n        }\n        return pixels;\n    }\n\n    function grayScale(pixels) {\n        var d = pixels.data;\n        for (var i = 0; i < d.length; i += 4) {\n            var r = d[i],\n                g = d[i + 1],\n                b = d[i + 2],\n                v = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n            d[i] = d[i + 1] = d[i + 2] = v;\n        }\n        return pixels;\n    }\n\n    function contrast(pixels, cont) {\n        var d = pixels.data,\n            average;\n        for (var i = 0; i < d.length; i += 4) {\n            cont = 10,\n                average = Math.round((d[i] + d[i + 1] + d[i + 2]) / 3);\n            if (average > 127) {\n                d[i] += d[i] / average * cont;\n                d[i + 1] += d[i + 1] / average * cont;\n                d[i + 2] += d[i + 2] / average * cont;\n            } else {\n                d[i] -= d[i] / average * cont;\n                d[i + 1] -= d[i + 1] / average * cont;\n                d[i + 2] -= d[i + 2] / average * cont;\n            }\n        }\n        return pixels;\n    }\n\n    function threshold(pixels, thres) {\n        var average, d = pixels.data;\n        for (var i = 0, len = w * h * 4; i < len; i += 4) {\n            average = d[i] + d[i + 1] + d[i + 2];\n            if (average < thres) {\n                d[i] = d[i + 1] = d[i + 2] = 0;\n            } else {\n                d[i] = d[i + 1] = d[i + 2] = 255;\n            }\n            d[i + 3] = 255;\n        }\n        return pixels;\n    }\n\n    function convolute(pixels, weights, opaque) {\n        var sw = pixels.width,\n            sh = pixels.height,\n            w = sw,\n            h = sh,\n            side = Math.round(Math.sqrt(weights.length)),\n            halfSide = Math.floor(side / 2),\n            src = pixels.data,\n            tmpCanvas = document.createElement('canvas'),\n            tmpCtx = tmpCanvas.getContext('2d'),\n            output = tmpCtx.createImageData(w, h),\n            dst = output.data,\n            alphaFac = opaque ? 1 : 0;\n        for (var y = 0; y < h; y++) {\n            for (var x = 0; x < w; x++) {\n                var sy = y,\n                    sx = x,\n                    r = 0,\n                    g = 0,\n                    b = 0,\n                    a = 0,\n                    dstOff = (y * w + x) * 4;\n                for (var cy = 0; cy < side; cy++) {\n                    for (var cx = 0; cx < side; cx++) {\n                        var scy = sy + cy - halfSide,\n                            scx = sx + cx - halfSide;\n                        if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\n                            var srcOff = (scy * sw + scx) * 4,\n                                wt = weights[cy * side + cx];\n                            r += src[srcOff] * wt;\n                            g += src[srcOff + 1] * wt;\n                            b += src[srcOff + 2] * wt;\n                            a += src[srcOff + 3] * wt;\n                        }\n                    }\n                }\n                dst[dstOff] = r;\n                dst[dstOff + 1] = g;\n                dst[dstOff + 2] = b;\n                dst[dstOff + 3] = a + alphaFac * (255 - a);\n            }\n        }\n        return output;\n    }\n\n    function buildSelectMenu(selectorVideo) {\n        videoSelect = $(selectorVideo);\n        videoSelect.html('');\n        try {\n            if (mediaDevices && mediaDevices.enumerateDevices) {\n                mediaDevices.enumerateDevices().then(function(devices) {\n                    devices.forEach(function(device) {\n                        gotSources(device);\n                    });\n                    videoSelect.children('option:first').prop('selected', true);\n                }).catch(function(error) {\n                    Self.options.getDevicesError(error);\n                });\n            } else if (mediaDevices && !mediaDevices.enumerateDevices) {\n                $('<option value=\"true\">On</option>').appendTo(videoSelect);\n                Self.options.getDevicesError(new NotSupportError('enumerateDevices Or getSources is Not supported'));\n            } else {\n                throw new NotSupportError('getUserMedia is Not supported');\n            }\n        } catch (error) {\n            Self.options.getDevicesError(error);\n        }\n    }\n\n    function testListDevices() {\n        if (mediaDevices && mediaDevices.enumerateDevices) {\n            mediaDevices.enumerateDevices().then(function(devices) {\n                devices.forEach(function(device) {\n                    if (device.kind === 'video' || device.kind === 'videoinput') {\n                        var face = (!device.facing || device.facing === '') ? 'unknown' : device.facing;\n                        var text = device.label || 'Camera '.concat(videoSelect.children().length + 1, ' (facing: ' + face + ')');\n                        console.log(text);\n                        //$('<option value=\"' + (device.id || device.deviceId) + '\">' + text + '</option>').appendTo(videoSelect);\n                    }\n                });\n                //videoSelect.children('option:first').prop('selected', true);\n            }).catch(function(error) {\n                Self.options.getDevicesError(error);\n            });\n        } else if (mediaDevices && !mediaDevices.enumerateDevices) {\n            //$('<option value=\"true\">On</option>').appendTo(videoSelect);\n            Self.options.getDevicesError(new NotSupportError('enumerateDevices Or getSources is Not supported'));\n        } else {\n            throw new NotSupportError('getUserMedia is Not supported');\n        }\n    }\n\n    function gotSources(device) {\n        if (device.kind === 'video' || device.kind === 'videoinput') {\n            var face = (!device.facing || device.facing === '') ? 'unknown' : device.facing;\n            var text = device.label || 'Camera '.concat(videoSelect.children().length + 1, ' (facing: ' + face + ')');\n            $('<option value=\"' + (device.id || device.deviceId) + '\">' + text + '</option>').appendTo(videoSelect);\n        }\n    }\n\n    function changeConstraints() {\n        var constraints = $.parseJSON(JSON.stringify(Self.options.constraints));\n        if (videoSelect && videoSelect.children().length !== 0) {\n            switch (videoSelect.val().toString()) {\n                case 'true':\n                    constraints.video.optional = [{\n                        sourceId: true\n                    }];\n                    break;\n                case 'false':\n                    constraints.video = false;\n                    break;\n                default:\n                    constraints.video.optional = [{\n                        sourceId: videoSelect.val()\n                    }];\n                    break;\n            }\n        }\n        constraints.audio = false;\n        return constraints;\n    }\n\n    function NotSupportError(message) {\n        this.name = 'NotSupportError';\n        this.message = (message || '');\n    }\n    NotSupportError.prototype = Error.prototype;\n    $.extend(Plugin.prototype, {\n        init: function() {\n            if (!initialized) {\n                if (!display || display.tagName.toLowerCase() !== 'canvas') {\n                    console.log('Element type must be canvas!');\n                    alert('Element type must be canvas!');\n                    return false;\n                }\n                qrcode.sourceCanvas = display;\n                initialized = true;\n                setEventListeners();\n                if (this.options.decodeQRCodeRate || this.options.decodeBarCodeRate) {\n                    setCallBack();\n                }\n                beepSound = new Audio(this.options.beep);\n            }\n            return this;\n        },\n        play: function() {\n            this.init();\n            play();\n            return this;\n        },\n        stop: function() {\n            stop();\n            return this;\n        },\n        pause: function() {\n            pause();\n            return this;\n        },\n        buildSelectMenu: function(selector) {\n            buildSelectMenu(selector);\n            return this;\n        },\n        testListDevices: function() {\n            testListDevices();\n            return this;\n        },\n        getOptimalZoom: function() {\n            return optimalZoom();\n        },\n        getLastImageSrc: function() {\n            return display.toDataURL();\n        },\n        isInitialized: function() {\n            return initialized;\n        }\n    });\n    $.fn[pluginName] = function(options) {\n        return this.each(function() {\n            if (!$.data(this, 'plugin_' + pluginName)) {\n                $.data(this, 'plugin_' + pluginName, new Plugin(this, options));\n            }\n        });\n    }\n})(jQuery, window, document);","\n\n\n\nvar WebCodeCamJQueryTxt = \"innerText\" in HTMLElement.prototype ? \"innerText\" : \"textContent\";\nvar WebCodeCamJQueryArg = {\n    resultFunction: function(resText, lastImageSrc) {\n        var aChild = document.createElement('li');\n        aChild[WebCodeCamJQueryTxt] = resText;\n        document.querySelector('body').appendChild(aChild);\n    }\n};\n/* ----------------------------------------- Available parameters -----------------------------------------*/\nvar WebCodeCamJQueryOptions = {\n    DecodeQRCodeRate: 5,            // null to disable OR int > 0 !\n    DecodeBarCodeRate: 5,           // null to disable OR int > 0 !\n    frameRate: 15,                  // 1 - 25\n    width: 220,                     // canvas width\n    height: 150,                    // canvas height\n    constraints: {                  // default constraints\n        video: {\n            mandatory: {\n                maxWidth: 1280,\n                maxHeight: 720\n            },\n            optional: [{\n                sourceId: true\n            }]\n        },\n        audio: false\n    },\n    flipVertical: false,            // boolean\n    flipHorizontal: false,          // boolean\n    zoom: 2,                       // if zoom = -1, auto zoom for optimal resolution else int\n    beep: \"/qrReader/audio/beep.mp3\",// string, audio file location\n    brightness: 0,                  // int\n    autoBrightnessValue: false,     // functional when value autoBrightnessValue is int\n    grayScale: false,               // boolean\n    contrast: 0,                    // int\n    threshold: 0,                   // int\n    sharpness: [],                  // to On declare matrix, example for sharpness ->  [0, -1, 0, -1, 5, -1, 0, -1, 0]\n    resultFunction: function(resText, lastImageSrc) { //resText as decoded code, lastImageSrc as image source\n        console.log(resText);\n        alert(resText);\n    },\n    cameraSuccess: function(stream) {                   //callback funtion to camera success\n        console.log('Camera Initialized');\n    },\n    canPlayFunction: function() {                       //callback funtion to can play\n        console.log('canPlayFunction');\n    },\n    getDevicesError: function(error) {                  //callback funtion to get Devices error\n        console.log(error);\n    },\n    getUserMediaError: function(error) {                //callback funtion to get usermedia error\n        console.log(error);\n    },\n    cameraError: function(error) {                      //callback funtion to camera error\n        console.log(error);\n    }\n};\n$(document).ready(function () {\n/*------------------------------------ Declarations and initializing ------------------------------------*/\n//new WebCodeCamJS(\"canvas\").init(WebCodeCamJQueryArg);\n/* OR */\n//var canvas = document.querySelector('#webcodecam-canvas');\n//new WebCodeCamJS(canvas).init();\n/* OR */\n//new WebCodeCamJS('#webcodecam-canvas').init();\n\n/*---------------------------- Example initializations using jquery version ----------------------------*/\n////////////////var decoder = $(\"#webcodecam-canvas\").WebCodeCamJQuery(WebCodeCamJQueryOptions).data().plugin_WebCodeCamJQuery;\n/* Chrome & Spartan: build select menu\n *  Firefox: the default camera initializes, return decoder object\n */\n//decoder.buildSelectMenu(\"#camera-select\");\n//simple initialization\n//decoder.testListDevices();\n///////////////////////decoder.init();\n\n/* ---------------------------------------- Available Functions: ----------------------------------------*/\n/* camera stop & delete stream */\n//decoder.stop();\n/* camera play, restore process */\n////////////////////////decoder.play();\n/* get current image from camera */\n//decoder.getLastImageSrc();\n/* get optimal zoom */\n//decoder.getOptimalZoom();\n/* Configurable options */\n//decoder.options['parameter'];\n/* Example:\n ** decoder.options.brightness = 20;         - set brightness to 20\n ** decoder.options.DecodeQRCodeRate = null; - disable qrcode decoder\n */\n});"],"sourceRoot":"/source/"}